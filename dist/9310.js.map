{"version":3,"file":"9310.js","mappings":";mXACA,smNACO,SAASA,IACd,IAAIC,EAAwB,KAY5B,SAASC,IAA0B,MAKjC,OAAO,IAAIC,SAAJ,UAAaF,SAAb,aAAa,EAAuBG,OAAOC,QAgHpD,MAAO,CACLC,kBA1HF,SAA2BC,GACzBN,EAAwBM,EAASC,SA0HjCC,kBAvGF,SAA2BC,EAAcC,GACvC,IAAMC,EAAOV,IAGb,OAFAU,EAAKC,UAAUH,EAAc,GAAG,GAChCE,EAAKC,UAAUF,EAAgB,GAAG,GA7Bd,GAkIpBG,eA7FF,SAAwBC,EAAMC,GAC5B,IAAMJ,EAAOV,IAGb,OAFAU,EAAKC,UAAUE,EAAM,GAAG,GACxBH,EAAKC,UAAUG,EAAa,GAAG,GAxCX,GAmIpBC,eAjHF,SAAwBC,EAAIC,GAC1B,OAlBiB,GAmIjBC,cApFF,SAAuBF,EAAIC,GACzB,IAAMP,EAAOV,IAIb,SAASmB,EAAaC,EAAYC,EAAOC,GACvC,IAAMC,EAAUF,EAGhBX,EAAKC,UAAUW,EAAe,EAAI,EAAGC,EAASD,GAC9CZ,EAAKC,UAAUW,EAAe,EAAI,EAHjB,EAG8BA,GAMjD,OAdAZ,EAAKc,SAASP,EAAQD,GACtBN,EAAKe,UAAUR,EAAS,EAAG,GAAG,GAC9BP,EAAKe,UAAUR,EAAS,EAAG,GAAG,GAS9BE,EAAaF,EAAY,GAAG,GAC5BE,EAAaF,EAAgB,GAAG,GA9DZ,GAqIpBS,SAlEF,SAAkBV,EAAIW,EAAMC,EAASC,GACnC,IAAIC,EAAU,EACRC,EAAc,GACdrB,EAAOV,IAqBPgC,EAnBN,SAAiBL,EAAMC,GAgBrB,OAVgBK,MAAMC,KAAK,CACzBC,OAAQP,IACP,SAAUQ,EAAGC,GACd,IAAMC,EAAMX,EAAW,EAAJU,EACbE,EAAM7B,EAAK8B,UAAUF,GAAK,GAC1BG,EAAS/B,EAAK8B,UAAUF,EAAM,GAAG,GAEvC,OAAO,IAAII,WAAW3C,EAAsBG,OAAOC,OAAQoC,EAAKE,MAMpDE,CAAQhB,EAAMC,GAc9B,OAHAI,EAAQY,SATR,SAAgBC,GACd,IAAIC,EACJ,IAAKA,EAAI,EAAGA,EAAID,EAAIE,WAAYD,IAC9Bf,EAAYiB,KAAKH,EAAIC,IAGvBhB,GAAWgB,KA/FY,IAmGrB9B,GAA2BiC,QAAQC,IAAIC,OAAOC,aAAaC,MAAM,KAAMtB,IAC3ErB,EAAKC,UAAUkB,EAAUC,GAAS,GAxGd,GAsIpBwB,oBAhHF,SAA6BtC,EAAIuC,EAASC,GACxC,OArBkB,IAqIlBC,YAtGF,SAAqBC,EAASC,GAC5B,OAlCoB,GAwIpBC,SA5FF,SAAkBC,EAAMC,GACtB,OA7CoB,GAyIpBC,YA7BF,SAAqBC,EAAKC,EAAMC,EAAgBC,GAC9C,OA1GkB,IAuIlBC,UA1BF,SAAmBC,GACjB,OA9GkB,IAwIlBC,SAhBF,SAAkBtD,GAChB,OAzHkB,IAyIlBuD,QApBF,SAAiBvD,EAAIwD,EAAQC,EAAQC,MAwBhC,SAAeC,EAAtB,sEAAO,WAAiCC,EAAYC,GAA7C,kFACC3E,EAAS,IAAI4E,YAAYC,OAAO,CACpCC,QAAS,EACTC,QAAS,KAGLC,EAAgB,CACpBC,uBAAyBN,EACzBO,cAAeP,EACfQ,IAAK,CACHC,WAAW,GAEbC,GAAI,CACFC,IAAKtF,IAbJ,SAgCY4E,YAAYW,YAAYb,EAAYM,GAhChD,cAgCL7E,EAhCK,OAkCLwE,EAAazE,kBAAkBC,EAASA,UAlCnC,kBAqCEA,GArCF,kEAwCA,SAAeqF,EAAtB,oEAAO,WAAqBd,GAArB,8EACCC,EAAe,IAAI/E,EADpB,SAEQ6E,EAAiBC,EAAYC,GAFrC","sources":["webpack://@web3os-core/kernel/./src/modules/wasm/wasi-polyfill.js"],"sourcesContent":["// Built upon https://www.wasmtutor.com/webassembly-barebones-wasi\r\n\r\nexport function createPolyfill () {\r\n  let moduleInstanceExports = null;\r\n\r\n  const WASI_ESUCCESS = 0;\r\n  const WASI_EBADF = 8;\r\n  const WASI_EINVAL = 28;\r\n  const WASI_ENOSYS = 52;\r\n  const WASI_STDOUT_FILENO = 1;\r\n\r\n  function setModuleInstance(instance) {\r\n    moduleInstanceExports = instance.exports;\r\n  }\r\n\r\n  function getModuleMemoryDataView() {\r\n    // call this any time you'll be reading or writing to a module's memory \r\n    // the returned DataView tends to be dissaociated with the module's memory buffer at the will of the WebAssembly engine \r\n    // cache the returned DataView at your own peril!!\r\n\r\n    return new DataView(moduleInstanceExports?.memory.buffer);\r\n  }\r\n\r\n  function fd_prestat_get(fd, bufPtr) {\r\n    return WASI_EBADF;\r\n  }\r\n\r\n  function fd_prestat_dir_name(fd, pathPtr, pathLen) {\r\n    return WASI_EINVAL;\r\n  }\r\n\r\n  function environ_sizes_get(environCount, environBufSize) {\r\n    const view = getModuleMemoryDataView();\r\n    view.setUint32(environCount, 0, !0);\r\n    view.setUint32(environBufSize, 0, !0);\r\n    return WASI_ESUCCESS;\r\n  }\r\n\r\n  function environ_get(environ, environBuf) {\r\n    return WASI_ESUCCESS;\r\n  }\r\n\r\n  function args_sizes_get(argc, argvBufSize) {\r\n    const view = getModuleMemoryDataView();\r\n    view.setUint32(argc, 0, !0);\r\n    view.setUint32(argvBufSize, 0, !0);\r\n    return WASI_ESUCCESS;\r\n  }\r\n\r\n  function args_get(argv, argvBuf) {\r\n    return WASI_ESUCCESS;\r\n  }\r\n\r\n  function fd_fdstat_get(fd, bufPtr) {\r\n    const view = getModuleMemoryDataView();\r\n    view.setUint8(bufPtr, fd);\r\n    view.setUint16(bufPtr + 2, 0, !0);\r\n    view.setUint16(bufPtr + 4, 0, !0);\r\n    function setBigUint64(byteOffset, value, littleEndian) {\r\n      const lowWord = value;\r\n      const highWord = 0;\r\n\r\n      view.setUint32(littleEndian ? 0 : 4, lowWord, littleEndian);\r\n      view.setUint32(littleEndian ? 4 : 0, highWord, littleEndian);\r\n    }\r\n\r\n    setBigUint64(bufPtr + 8, 0, !0);\r\n    setBigUint64(bufPtr + 8 + 8, 0, !0);\r\n\r\n    return WASI_ESUCCESS;\r\n  }\r\n\r\n  function fd_write(fd, iovs, iovsLen, nwritten) {\r\n    let written = 0;\r\n    const bufferBytes = [];\r\n    const view = getModuleMemoryDataView();\r\n\r\n    function getiovs(iovs, iovsLen) {\r\n      // iovs* -> [iov, iov, ...]\r\n      // __wasi_ciovec_t {\r\n      //   void* buf,\r\n      //   size_t buf_len,\r\n      // }\r\n      const buffers = Array.from({\r\n        length: iovsLen\r\n      }, function (_, i) {\r\n        const ptr = iovs + i * 8;\r\n        const buf = view.getUint32(ptr, !0);\r\n        const bufLen = view.getUint32(ptr + 4, !0);\r\n\r\n        return new Uint8Array(moduleInstanceExports.memory.buffer, buf, bufLen);\r\n      });\r\n\r\n      return buffers;\r\n    }\r\n\r\n    const buffers = getiovs(iovs, iovsLen);\r\n\r\n    function writev(iov) {\r\n      let b\r\n      for (b = 0; b < iov.byteLength; b++) {\r\n        bufferBytes.push(iov[b]);\r\n      }\r\n\r\n      written += b;\r\n    }\r\n\r\n    buffers.forEach(writev);\r\n    if (fd === WASI_STDOUT_FILENO) console.log(String.fromCharCode.apply(null, bufferBytes));\r\n    view.setUint32(nwritten, written, !0);\r\n    return WASI_ESUCCESS;\r\n  }\r\n\r\n  function poll_oneoff(sin, sout, nsubscriptions, nevents) {\r\n    return WASI_ENOSYS;\r\n  }\r\n\r\n  function proc_exit(rval) {\r\n    return WASI_ENOSYS;\r\n  }\r\n\r\n  function fd_close(fd) {\r\n    return WASI_ENOSYS;\r\n  }\r\n\r\n  function fd_seek(fd, offset, whence, newOffsetPtr) {\r\n  }\r\n\r\n  function fd_close(fd) {\r\n    return WASI_ENOSYS;\r\n  }\r\n\r\n  return {\r\n    setModuleInstance: setModuleInstance,\r\n    environ_sizes_get: environ_sizes_get,\r\n    args_sizes_get: args_sizes_get,\r\n    fd_prestat_get: fd_prestat_get,\r\n    fd_fdstat_get: fd_fdstat_get,\r\n    fd_write: fd_write,\r\n    fd_prestat_dir_name: fd_prestat_dir_name,\r\n    environ_get: environ_get,\r\n    args_get: args_get,\r\n    poll_oneoff: poll_oneoff,\r\n    proc_exit: proc_exit,\r\n    fd_close: fd_close,\r\n    fd_seek: fd_seek\r\n  }\r\n}\r\n\r\nexport async function importWasmModule (moduleData, wasiPolyfill) {\r\n  const memory = new WebAssembly.Memory({\r\n    initial: 2,\r\n    maximum: 10\r\n  });\r\n\r\n  const moduleImports = {\r\n    wasi_snapshot_preview1 : wasiPolyfill,\r\n    wasi_unstable: wasiPolyfill,\r\n    env: {\r\n      is_web3os: true\r\n    },\r\n    js: {\r\n      mem: memory\r\n    }\r\n  };\r\n\r\n  let instance\r\n\r\n  // let module = await (await fetch(moduleName)).arrayBuffer()\r\n  // let module = null;\r\n\r\n  // if (WebAssembly.compileStreaming) {\r\n  //   module = await WebAssembly.compileStreaming(fetch(moduleName));\r\n  // } else {\r\n  //   const response = await fetch(moduleName);\r\n  //   const buffer = await response.arrayBuffer();\r\n  //   module = await WebAssembly.compile(buffer);\r\n  // }\r\n\r\n  // console.log({ module, moduleData, moduleImports })\r\n\r\n  instance = await WebAssembly.instantiate(moduleData, moduleImports);\r\n\r\n  wasiPolyfill.setModuleInstance(instance.instance);\r\n  // instance.exports._start();\r\n\r\n  return instance\r\n}\r\n\r\nexport async function load (moduleData) {\r\n  const wasiPolyfill = new createPolyfill()\r\n  return await importWasmModule(moduleData, wasiPolyfill)\r\n}\r\n"],"names":["createPolyfill","moduleInstanceExports","getModuleMemoryDataView","DataView","memory","buffer","setModuleInstance","instance","exports","environ_sizes_get","environCount","environBufSize","view","setUint32","args_sizes_get","argc","argvBufSize","fd_prestat_get","fd","bufPtr","fd_fdstat_get","setBigUint64","byteOffset","value","littleEndian","lowWord","setUint8","setUint16","fd_write","iovs","iovsLen","nwritten","written","bufferBytes","buffers","Array","from","length","_","i","ptr","buf","getUint32","bufLen","Uint8Array","getiovs","forEach","iov","b","byteLength","push","console","log","String","fromCharCode","apply","fd_prestat_dir_name","pathPtr","pathLen","environ_get","environ","environBuf","args_get","argv","argvBuf","poll_oneoff","sin","sout","nsubscriptions","nevents","proc_exit","rval","fd_close","fd_seek","offset","whence","newOffsetPtr","importWasmModule","moduleData","wasiPolyfill","WebAssembly","Memory","initial","maximum","moduleImports","wasi_snapshot_preview1","wasi_unstable","env","is_web3os","js","mem","instantiate","load"],"sourceRoot":""}