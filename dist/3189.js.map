{"version":3,"file":"3189.js","mappings":";giBACA,8hGAAAA,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,0oDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4zFAGO,IAAMC,EAAU,GAEVC,EAAO,OACPC,EAAU,QACVC,EAAc,6BACdC,EAAO,yVAYPC,EAAO,CAClB,SAAUC,QACV,YAAaA,SAGR,SAAeC,EAAtB,oEAAO,WAAwBC,GAAxB,iIACuBC,MAAMD,GAD7B,8BACmCE,OADnC,WACCC,EADD,QAEOC,IAAOD,EAAOE,UAFrB,yCAEuC,MAFvC,OAICC,EAAK,IAAIC,YAAYJ,EAAOK,KAAKF,GAAGG,QAJrC,IAKuBN,EAAOK,KAAKF,GAAGI,WALtC,IAKL,IAAK,EAAL,qBAAsD,eAA1CC,EAA0C,KAAnCC,EAAmC,KAAAN,EAAGK,GAASC,EAL7D,8BAOCP,EAAY,IAAIE,YAAYJ,EAAOE,UAAUI,QAP9C,IAQuBN,EAAOE,UAAUK,WARxC,IAQL,IAAK,EAAL,qBAAwD,eAA5CC,EAA4C,KAArCC,EAAqC,KAAAP,EAAUM,GAASC,EARtE,qCAUCC,EAVD,OAUkBV,GAVlB,IAU0BE,UAAAA,EAAWG,KAAM,EAAF,KAAOL,EAAOK,MAAd,IAAoBF,GAAAA,MAV7D,UAWcQ,UAAUC,YAAYC,OAAO,CAAEH,UAAAA,IAX7C,QAWCI,EAXD,OAYLC,QAAQC,IAAI,CAAEF,KAAAA,IAERG,EAAU,IAAIC,YAAY,SAC1BC,EAAaC,KAAKC,MAAMJ,EAAQK,OAAOR,EAAKS,SAASC,iBAC3DT,QAAQC,IAAI,CAAEG,WAAAA,IAERM,EAAoBC,EAAAA,OAAYZ,EAAKS,SAASE,mBACpDV,QAAQC,IAAI,CAAES,kBAAAA,IAIRE,EAAW,IAAIC,SAAS,IAAIxB,YAAY,IAC3BqB,EAAkBI,SAASC,MAAM,GAAI,IAC7CC,SAAQ,SAACC,EAAOxB,GAAR,OAAkBmB,EAASM,SAASzB,EAAOwB,MACxDE,EAAqBP,EAASQ,YAEfV,EAAkBI,SAASC,MAAM,GAAII,GACpDE,EAAiBX,EAAkBI,SAASC,MAAM,GAAKI,GACvDG,EAAkBX,EAAAA,OAAYU,EAAeE,QAEnDvB,QAAQC,IAAI,CAAEqB,gBAAAA,IAhCT,mEAmCA,SAAeE,EAAtB,sEAAO,WAAwBC,EAAKC,GAA7B,4EACGD,EADH,OAEE,aAFF,+CAGM5C,EAAO,UAAC6C,EAAKC,SAAN,aAAC,EAAS,GAAID,IAH3B,gCAKMA,EAAKE,SAAS3B,IAAIvB,IALxB,kEASA,SAAemD,EAAtB,oEAAO,WAAoBC,GAApB,0FAA0BC,EAA1B,+BAAoC,GACpCnC,UAAUC,YADV,sBAC6B,IAAImC,MAAMC,OAAOC,OAAO,uDADrD,YAGCR,EAAOS,IAAIxD,EAAM,CAAEyD,MAAMC,EAAAA,EAAAA,GAASN,MAC/B,aAJJ,yCAIyBD,EAAK7B,IAAIzB,IAJlC,WAKDkD,EAAK,UALJ,yCAKsBI,EAAK7B,IAAIvB,IAL/B,cAOLgD,EAAKE,SAAWE,EAPX,kBAQEN,EAAO,UAACE,EAAKC,SAAN,aAAC,EAAS,GAAID,IARvB","sources":["file:////home/j/code/web3os/@web3os-core/kernel/src/modules/auth/index.js"],"sourcesContent":["import arg from 'arg'\nimport CBOR from 'cbor'\nimport { parse as cliParse } from 'shell-quote'\n\nexport const devices = []\n\nexport const name = 'auth'\nexport const version = '0.1.0'\nexport const description = 'Web Authentication Utility'\nexport const help = `\n  Manage user credentials with webauthn\n\n  Usage:\n    auth register <url>                Register with server at <url>\n    auth login <url>                   Login to the server at <url>\n\n  Options:\n    --help                             Print this help message\n    --version                          Print the version information\n`\n\nexport const spec = {\n  '--help': Boolean,\n  '--version': Boolean\n}\n\nexport async function request (url) {\n  const result = await (await fetch(url)).json()\n  if (!result.rp || !result.challenge) return null\n\n  const id = new ArrayBuffer(result.user.id.length)\n  for (const [index, byte] of result.user.id.entries()) id[index] = byte\n\n  const challenge = new ArrayBuffer(result.challenge.length)\n  for (const [index, byte] of result.challenge.entries()) challenge[index] = byte\n\n  const publicKey = { ...result, challenge, user: { ...result.user, id } }\n  const cred = await navigator.credentials.create({ publicKey })\n  console.log({ cred })\n\n  const decoder = new TextDecoder('utf-8')\n  const clientData = JSON.parse(decoder.decode(cred.response.clientDataJSON))\n  console.log({ clientData })\n\n  const attestationObject = CBOR.decode(cred.response.attestationObject)\n  console.log({ attestationObject })\n\n  // Credit to Suby Raman; this stuff gets complicated!\n  // https://www.youtube.com/watch?v=MesXuMg0WKo\n  const dataView = new DataView(new ArrayBuffer(2))\n  const idLenBytes = attestationObject.authData.slice(53, 55)\n  idLenBytes.forEach((value, index) => dataView.setUint8(index, value))\n  const credentialIdLength = dataView.getUint16()\n\n  const credentialId = attestationObject.authData.slice(55, credentialIdLength)\n  const publicKeyBytes = attestationObject.authData.slice(55 + credentialIdLength)\n  const publicKeyObject = CBOR.decode(publicKeyBytes.buffer)\n\n  console.log({ publicKeyObject })\n}\n\nexport async function execute (cmd, args) {\n  switch (cmd) {\n    case 'register':\n      return request(args._?.[1], args)\n    default:\n      return args.terminal.log(help)\n  }\n}\n\nexport async function run (term, context = '') {\n  if (!navigator.credentials) throw new Error(colors.danger('Client does not support the Web Authentication API'))\n\n  const args = arg(spec, { argv: cliParse(context) })\n  if (args['--version']) return term.log(version)\n  if (args['--help']) return term.log(help)\n\n  args.terminal = term\n  return execute(args._?.[0], args)\n}\n"],"names":["i","devices","name","version","description","help","spec","Boolean","request","url","fetch","json","result","rp","challenge","id","ArrayBuffer","user","length","entries","index","byte","publicKey","navigator","credentials","create","cred","console","log","decoder","TextDecoder","clientData","JSON","parse","decode","response","clientDataJSON","attestationObject","CBOR","dataView","DataView","authData","slice","forEach","value","setUint8","credentialIdLength","getUint16","publicKeyBytes","publicKeyObject","buffer","execute","cmd","args","_","terminal","run","term","context","Error","colors","danger","arg","argv","cliParse"],"sourceRoot":""}