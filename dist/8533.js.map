{"version":3,"file":"8533.js","mappings":";ylBACA,8hGAAAA,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,0oDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,kkBAIO,IAAMC,EAAO,YACPC,EAAU,QACVC,EAAc,oBACdC,EAAO,OAAH,OACbC,IAAAA,QAAAA,KAAoB,qBADP,oyBAyBJC,EAAO,CAClB,YAAaC,OACb,YAAaA,OACb,SAAUC,QACV,YAAaD,OACb,QAASA,OACT,YAAaC,SAGTC,EAAWC,IAAAA,cAGJC,GAFA,IAAID,IAAJ,CAASD,GAEI,CACxBG,QAAS,+BACTC,OAAQ,sCACRC,MAAO,qCACPC,QAAS,uCACTC,QAAS,yCAGJ,SAAeC,EAAtB,oEAAO,WAAwBC,GAAxB,8FAAiCC,EAAjC,+BAAwC,GACxCD,EADA,sBACe,IAAIE,MAAM,wBADzB,cAECC,EAAa,UAAGV,EAAWQ,EAAK,cAAgB,YAAnC,oCAEJD,EAAQI,SAAS,KAAO,eAAiB,WAFrC,mBAGHJ,GAHG,eAIPC,EAAK,UAAY,UAJV,kBAKJA,EAAK,cAAgBI,OAAOC,IAAI,YAAa,YAAc,IAPrE,SASkBC,MAAMJ,GATxB,cASCK,EATD,gBAUoBA,EAASC,OAV7B,uBAUGC,EAVH,EAUGA,OAVH,kBAWEA,GAXF,oEAcA,SAAeC,EAAtB,oEAAO,WAA6BX,GAA7B,8FAAsCC,EAAtC,+BAA6C,GAC7CD,EADA,sBACe,IAAIE,MAAM,wBADzB,cAECC,EAAa,UAAGV,EAAWQ,EAAK,cAAgB,YAAnC,mDAGHD,IACXC,EAAK,gBAAL,sBAAsCA,EAAK,iBAAoB,KAC/DA,EAAK,cAAL,oBAAkCA,EAAK,eAAkB,KACzDA,EAAK,UAAL,gBAA0BA,EAAK,WAAc,KAC7CA,EAAK,YAAL,kBAA8BA,EAAK,aAAgB,KACnDA,EAAK,UAAL,gBAA0BA,EAAK,WAAc,IAR/B,kBASJA,EAAK,cAAgBI,OAAOC,IAAI,YAAa,YAAc,IAXrE,SAakBC,MAAMJ,GAbxB,cAaCK,EAbD,gBAcoBA,EAASC,OAd7B,uBAcGC,EAdH,EAcGA,OAdH,kBAeEA,GAfF,oEAkBA,SAAeE,EAAtB,oEAAO,WAAoBC,GAApB,4FAA0BC,EAA1B,+BAAoC,KACnCb,EAAOc,IAAI3B,EAAM,CAAE4B,MAAMC,EAAAA,EAAAA,GAASH,MAC/B,aAFJ,yCAEyBD,EAAKK,IAAIlC,IAFlC,WAGDiB,EAAK,UAHJ,yCAGsBY,EAAKK,IAAIhC,IAH/B,WAKDe,EAAK,cAAiB,CAAC,UAAW,SAAU,QAAS,UAAW,WAAWG,SAASH,EAAK,cALxF,sBAK6G,IAAIC,MAAM,mBALvH,OAOCiB,EAPD,UAOOlB,EAAKmB,SAPZ,aAOO,EAAS,GAPhB,KASGD,EATH,OAUE,YAVF,QAYE,iBAZF,qCAWMN,EAXN,UAWqBd,EAAQE,EAAK,aAAcA,GAXhD,kDAWWiB,IAXX,qCAaML,EAbN,UAaqBF,EAAaV,EAAK,aAAcA,GAbrD,kDAaWiB,IAbX,kDAeML,EAAKK,IAAIhC,IAff","sources":["webpack://@web3os-core/kernel/./src/modules/etherscan/index.js"],"sourcesContent":["import arg from 'arg'\r\nimport Web3 from 'web3'\r\nimport colors from 'ansi-colors'\r\nimport { parse as cliParse } from 'shell-quote'\r\n\r\nexport const name = 'etherscan'\r\nexport const version = '0.1.0'\r\nexport const description = 'Etherscan Utility'\r\nexport const help = `\r\n  ${colors.magenta.bold('Etherscan Utility')}\r\n\r\n  Usage:\r\n    etherscan <command> [options]\r\n\r\n  Commands:\r\n    balance                         Print the balance of address\r\n      --address     <address>       You may specify multiple addresses, comma separated\r\n      --tag         [{latest},pending,earliest]\r\n    transactions                    List transactions\r\n      --address     <address>\r\n      --startBlock  [number]\r\n      --endBlock    [number]\r\n      --page        [number]\r\n      --offset      [number]\r\n      --sort        [{desc},asc]\r\n\r\n  Options:\r\n    --api-key                       {kernel.get('etherscan', 'api-key')}\r\n    --help                          Print this help message\r\n    --network                       {mainnet},goerli,kovan,rinkeby,ropsten\r\n    --version                       Print the version information\r\n`\r\n\r\nexport const spec = {\r\n  '--address': String,\r\n  '--api-key': String,\r\n  '--help': Boolean,\r\n  '--network': String,\r\n  '--tag': String,\r\n  '--version': Boolean\r\n}\r\n\r\nconst provider = Web3.givenProvider\r\nconst web3 = new Web3(provider)\r\n\r\nexport const baseApiUrl = {\r\n  mainnet: 'https://api.etherscan.io/api',\r\n  goerli: 'https://api-goerli.etherscan.io/api',\r\n  kovan: 'https://api-kovan.etherscan.io/api',\r\n  rinkeby: 'https://api-rinkeby.etherscan.io/api',\r\n  ropsten: 'https://api-ropsten.etherscan.io/api'\r\n}\r\n\r\nexport async function balance (address, args = {}) {\r\n  if (!address) throw new Error('No address specified')\r\n  const requestUrl = `${baseApiUrl[args['--network'] || 'mainnet']}`\r\n    + `?module=account`\r\n    + `&action=${address.includes(',') ? 'balancemulti' : 'balance'}`\r\n    + `&address=${address}`\r\n    + `&tag=${args['--tag'] || 'latest'}`\r\n    + `&apikey=${args['--api-key'] || kernel.get('etherscan', 'api-key') || ''}`\r\n\r\n  const response = await fetch(requestUrl)\r\n  const { result } = await response.json()\r\n  return result\r\n}\r\n\r\nexport async function transactions (address, args = {}) {\r\n  if (!address) throw new Error('No address specified')\r\n  const requestUrl = `${baseApiUrl[args['--network'] || 'mainnet']}`\r\n    + `?module=account`\r\n    + `&action=txlist`\r\n    + `&address=${address}`\r\n    + (args['--startBlock'] ? `&startBlock=${args['--startBlock']}` : '')\r\n    + (args['--endBlock'] ? `&endBlock=${args['--endBlock']}` : '')\r\n    + (args['--page'] ? `&page=${args['--page']}` : '')\r\n    + (args['--offset'] ? `&offset=${args['--offset']}` : '')\r\n    + (args['--sort'] ? `&sort=${args['--sort']}` : '')\r\n    + `&apikey=${args['--api-key'] || kernel.get('etherscan', 'api-key') || ''}`\r\n\r\n  const response = await fetch(requestUrl)\r\n  const { result } = await response.json()\r\n  return result\r\n}\r\n\r\nexport async function run (term, context = '') {\r\n  const args = arg(spec, { argv: cliParse(context) })\r\n  if (args['--version']) return term.log(version)\r\n  if (args['--help']) return term.log(help)\r\n\r\n  if (args['--network'] && !['mainnet', 'goerli', 'kovan', 'rinkeby', 'ropsten'].includes(args['--network'])) throw new Error('Invalid network')\r\n\r\n  const cmd = args._?.[0]\r\n\r\n  switch (cmd) {\r\n    case 'balance':\r\n      return term.log(await balance(args['--address'], args))\r\n    case 'transactions':\r\n      return term.log(await transactions(args['--address'], args))\r\n    default:\r\n      return term.log(help)\r\n  }\r\n}\r\n"],"names":["i","name","version","description","help","colors","spec","String","Boolean","provider","Web3","baseApiUrl","mainnet","goerli","kovan","rinkeby","ropsten","balance","address","args","Error","requestUrl","includes","kernel","get","fetch","response","json","result","transactions","run","term","context","arg","argv","cliParse","log","cmd","_"],"sourceRoot":""}