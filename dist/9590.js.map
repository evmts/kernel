{"version":3,"file":"9590.js","mappings":";uIAAA,MAAMA,EAAaC,OAAO,YAE1B,MAAMC,UAAiBC,MACtBC,YAAYC,EAAKC,GAChBC,MAAMF,GACNG,KAAKC,KAAO,WACZD,KAAKF,KAAOA,EAEZI,OAAOC,eAAeH,KAAMN,EAASU,YAIvC,SAASC,EACRC,GACA,KACCC,EAAOC,EAAQD,KAAKE,MAAM,GAAE,WAC5BC,GAAa,EAAK,iBAClBC,GAAmB,GAChB,IAEJ,IAAKL,EACJ,MAAM,IAAIZ,EACT,4CACA,sBAIF,MAAMkB,EAAS,CAAEC,EAAG,IAEdC,EAAU,GACVC,EAAW,GAEjB,IAAK,MAAMC,KAAOd,OAAOe,KAAKX,GAAO,CACpC,IAAKU,EACJ,MAAM,IAAItB,EACT,yCACA,wBAIF,GAAe,MAAXsB,EAAI,GACP,MAAM,IAAItB,EACT,gDAAgDsB,KAChD,yBAIF,GAAmB,IAAfA,EAAIE,OACP,MAAM,IAAIxB,EACT,qEAAqEsB,IACrE,yBAIF,GAAyB,iBAAdV,EAAKU,GAAmB,CAClCF,EAAQE,GAAOV,EAAKU,GACpB,SAGD,IAAIG,EAAOb,EAAKU,GACZI,GAAS,EAEb,GACCC,MAAMC,QAAQH,IACE,IAAhBA,EAAKD,QACc,mBAAZC,EAAK,GACX,CACD,MAAOI,GAAMJ,EACbA,EAAO,CAACK,EAAOvB,EAAMwB,EAAO,MAC3BA,EAAKC,KAAKH,EAAGC,EAAOvB,EAAMwB,EAAKA,EAAKP,OAAS,KACtCO,GAERL,EAASG,IAAOI,UAA8B,IAAnBJ,EAAG/B,OACxB,IAAoB,mBAAT2B,EAGjB,MAAM,IAAIzB,EACT,uDAAuDsB,IACvD,uBAJDI,EAASD,IAASQ,UAAgC,IAArBR,EAAK3B,GAQnC,GAAe,MAAXwB,EAAI,IAAcA,EAAIE,OAAS,EAClC,MAAM,IAAIxB,EACT,4EAA4EsB,IAC5E,+BAIFD,EAASC,GAAO,CAACG,EAAMC,GAGxB,IAAK,IAAIQ,EAAI,EAAGC,EAAMtB,EAAKW,OAAQU,EAAIC,EAAKD,IAAK,CAChD,MAAME,EAAWvB,EAAKqB,GAEtB,GAAIjB,GAAoBC,EAAOC,EAAEK,OAAS,EAAG,CAC5CN,EAAOC,EAAID,EAAOC,EAAEkB,OAAOxB,EAAKE,MAAMmB,IACtC,MAGD,GAAiB,OAAbE,EAAmB,CACtBlB,EAAOC,EAAID,EAAOC,EAAEkB,OAAOxB,EAAKE,MAAMmB,EAAI,IAC1C,MAGD,GAAIE,EAASZ,OAAS,GAAqB,MAAhBY,EAAS,GAAY,CAE/C,MAAME,EACW,MAAhBF,EAAS,IAAkC,IAApBA,EAASZ,OAC7B,CAACY,GACDA,EACCrB,MAAM,GACNwB,MAAM,IACNC,KAAKC,GAAM,IAAIA,MAGpB,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAmBd,OAAQkB,IAAK,CACnD,MAAM/B,EAAM2B,EAAmBI,IACxBC,EAAiBC,GACZ,MAAXjC,EAAI,GAAaA,EAAI4B,MAAM,QAAS,GAAK,CAAC5B,OAAKkC,GAEhD,IAAIC,EAAUH,EACd,KAAOG,KAAW1B,GACjB0B,EAAU1B,EAAQ0B,GAGnB,KAAMA,KAAWzB,GAAW,CAC3B,GAAIL,EAAY,CACfE,EAAOC,EAAEa,KAAKrB,GACd,SAEA,MAAM,IAAIX,EACT,iCAAiC2C,IACjC,sBAKH,MAAOlB,EAAMC,GAAUL,EAASyB,GAEhC,IAAKpB,GAAUgB,EAAI,EAAIJ,EAAmBd,OACzC,MAAM,IAAIxB,EACT,0EAA0E2C,IAC1E,iCAIF,GAAIjB,EACHR,EAAO4B,GAAWrB,GAAK,EAAMqB,EAAS5B,EAAO4B,SACvC,QAAeD,IAAXD,EAAsB,CAChC,GACC/B,EAAKW,OAASU,EAAI,GACjBrB,EAAKqB,EAAI,GAAGV,OAAS,GACF,MAAnBX,EAAKqB,EAAI,GAAG,MAEXrB,EAAKqB,EAAI,GAAGa,MAAM,0BACjBtB,IAASuB,SAEU,oBAAXC,QAA0BxB,IAASwB,SAK9C,MAAM,IAAIjD,EACT,6BAA6B2C,IAF7BA,IAAoBG,EAAU,GAAK,eAAeA,OAGlD,gCAIF5B,EAAO4B,GAAWrB,EAAKZ,EAAKqB,EAAI,GAAIY,EAAS5B,EAAO4B,MAClDZ,OAEFhB,EAAO4B,GAAWrB,EAAKmB,EAAQE,EAAS5B,EAAO4B,UAIjD5B,EAAOC,EAAEa,KAAKI,GAIhB,OAAOlB,EAGRP,EAAIuC,KAAQrB,IACXA,EAAG/B,IAAc,EACV+B,GAIRlB,EAAIwC,MAAQxC,EAAIuC,MAAK,CAACE,EAAG7C,EAAM8C,KAAmBA,GAAiB,GAAK,IAGxE1C,EAAIX,SAAWA,EAEfsD,EAAOC,QAAU5C,0aCjMjB,8hGAAAuB,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,0oDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4qBAIA,IAAK,IAAL,MAA0B1B,OAAOgD,QAAQC,EAAAA,SAAzC,gBAAK,g1BAAOnC,EAAP,KAAYoC,EAAZ,KAA8CC,OAAOC,KAAKC,kBAAkBvC,EAAK,MAAOoC,GAAM,GACnG,IAAQI,EAAMH,OAAOC,KAAbE,EAEKvD,EAAO,OACPwD,EAAU,QACVC,EAAcF,EAAE,uBAAwB,gCAExCG,EAAO,OAAH,OACbH,EAAE,QAAS,SADE,kDAEqBA,EAAE,mCAAoC,oCAF3D,uBAGLA,EAAE,WAAY,YAHT,6BAGyCA,EAAE,2BAA4B,2BAHvE,iBAKbA,EAAE,UAAW,WALA,kDAMqBA,EAAE,uBAAwB,2BAN/C,iDAOqBA,EAAE,0BAA2B,iCAPlD,MAUJI,EAAO,CAClB,SAAUjC,QACV,YAAaA,SAGR,SAAekC,EAAtB,oEAAO,WAAoBC,GAApB,wFAA0BC,EAA1B,+BAAoC,KACnCC,EAAO3D,IAAIuD,EAAM,CAAErD,MAAM0D,EAAAA,EAAAA,GAASF,MAC/B,aAFJ,yCAEyBD,EAAKI,IAAIT,IAFlC,WAGDO,EAAK,UAHJ,yCAGsBF,EAAKI,IAAIP,IAH/B,UAKLK,EAAKG,SAAWL,EAEA,KAAZC,EAPC,yCAOsBD,EAAKI,IAAIb,OAAOC,KAAKc,WAP3C,OAQLf,OAAOC,KAAKe,eAAeN,GARtB,iIC3BP,SACEO,KAAM,CACJZ,YAAa,uCACba,wBAAyB,sCACzBC,gBAAiB,iGCFrB,SACEC,YAAIC,wBCyBN,IATA,IAAIC,EAAU,MAAQ,CAClB,SAAU,SAAU,KAAM,SAAU,SAAU,KAAM,OAAQ,aAC9DC,KAAK,KAAO,IAMVC,EAAQ,GACHjD,EAAI,EAAGA,EAAI,EAAGA,IACnBiD,IAAUC,KAAKC,IAAI,GAAG,GAAGD,KAAKE,UAAUC,SAAS,IAGrDhC,EAAQ,EAAQ,SAAUiC,EAAGC,EAAK7E,GAC9B,IAAI8E,EAeR,SAAgBF,EAAGC,EAAK7E,GACpB,IAAI+E,EAAU,IAAIC,OAAO,CACrB,IAAMX,EAAU,IAChB,6FACFC,KAAK,KAAM,KACTnC,EAAQyC,EAAEzC,MAAM4C,GAASE,OAAO5D,SAChC6D,GAAY,EAEhB,OAAK/C,GACA0C,IAAKA,EAAM,IACX7E,IAAMA,EAAO,IACXmC,EAAMP,KAAI,SAAUgD,EAAG9C,GAC1B,IAAIoD,EAAJ,CAGA,GAAIF,OAAO,IAAMX,EAAU,KAAKc,KAAKP,GACjC,MAAO,CAAEQ,GAAIR,GAuBjB,IATA,IAGIS,EAAKrF,EAAKsF,QAAU,KACpBC,GAAQ,EACRC,GAAM,EACNC,EAAM,GACNC,GAAS,EAEJpE,EAAI,EAAGC,EAAMqD,EAAEhE,OAAQU,EAAIC,EAAKD,IAAK,CAC1C,IAAIqE,EAAIf,EAAEgB,OAAOtE,GAEjB,GADAoE,EAASA,IAAYH,IAAgB,MAANI,GAAmB,MAANA,GACxCH,EACAC,GAAOE,EACPH,GAAM,OAEL,GAAID,EACDI,IAAMJ,EACNA,GAAQ,EAlBX,KAoBQA,EACLE,GAAOE,EAGHA,IAAMN,GACN/D,GAAK,EAGDmE,GA3BX,OAyBOE,EAAIf,EAAEgB,OAAOtE,KACGqE,IAAMN,GAzB7B,MAyBmCM,EACjBA,EAEAN,EAAKM,GAIhBF,GAhCP,MA+BYE,EACEE,IAGAF,OAId,GAxCA,MAwCIA,GAzCJ,MAyCgBA,EACjBJ,EAAQI,MAEP,IAAIX,OAAO,IAAMX,EAAU,KAAKc,KAAKQ,GACtC,MAAO,CAAEP,GAAIR,GAEZ,GAAII,OAAO,OAAOG,KAAKQ,GAExB,OADAT,GAAY,EACRO,EAAI7E,OACG,CAAC6E,EAAK,CAAEK,QAASlB,EAAEzE,MAAMmB,EAAE,GAAKa,EAAMhC,MAAM2B,EAAE,GAAGwC,KAAK,OAE1D,CAAC,CAAEwB,QAASlB,EAAEzE,MAAMmB,EAAE,GAAKa,EAAMhC,MAAM2B,EAAE,GAAGwC,KAAK,OAEnDqB,IAAMN,EACXG,GAAM,EAGNC,GAxDC,MAuDIE,EACEE,IAECF,GAGhB,OAAID,EAAe,CAACN,GAAI,OAAQW,QAASN,GAElCA,EAEP,SAASI,IAEL,IAAIG,EAAQC,EAuCAC,EAAKxF,EACjByF,EAtCA,GAHA7E,GAAK,EAGe,MAAhBsD,EAAEgB,OAAOtE,GAAY,CAErB,GADAA,GAAK,EACe,MAAhBsD,EAAEgB,OAAOtE,GACT,MAAM,IAAIjC,MAAM,qBAAuBuF,EAAEwB,OAAO9E,EAAI,EAAG,IAG3D,IADA0E,EAASpB,EAAEyB,QAAQ,IAAK/E,IACX,EACT,MAAM,IAAIjC,MAAM,qBAAuBuF,EAAEwB,OAAO9E,IAEpD2E,EAAUrB,EAAEwB,OAAO9E,EAAG0E,EAAS1E,GAC/BA,EAAI0E,MAEC,cAAcb,KAAKP,EAAEgB,OAAOtE,KACjC2E,EAAUrB,EAAEgB,OAAOtE,GACnBA,GAAK,IAGL0E,EAASpB,EAAEwB,OAAO9E,GAAGa,MAAM,cAKvB8D,EAAUrB,EAAEwB,OAAO9E,EAAG0E,EAAOM,OAC7BhF,GAAK0E,EAAOM,MAAQ,IAJpBL,EAAUrB,EAAEwB,OAAO9E,GACnBA,EAAIsD,EAAEhE,QAMd,OAWYsF,EAXQ,GAWHxF,EAXOuF,OAalBhE,KADNkE,EAAmB,mBAARtB,EAAqBA,EAAInE,GAAOmE,EAAInE,KACrB,IAAPA,EACnByF,EAAI,QACOlE,IAANkE,IACLA,EAAI,KAES,iBAANA,EACAD,EAAM3B,EAAQgC,KAAKC,UAAUL,GAAK5B,EAEjC2B,EAAMC,MAjBrBM,QAAO,SAAStF,EAAMpB,GACnB,YAAYkC,IAARlC,EACOoB,EAEJA,EAAKM,OAAO1B,KACrB,KAhIiB,GAvBN2G,CAAM9B,EAAGC,EAAK7E,GAC3B,MAAmB,mBAAR6E,EAA2BC,EAC/BA,EAAO2B,QAAO,SAAUE,EAAK/B,GAChC,GAAiB,iBAANA,EAAgB,OAAO+B,EAAIlF,OAAOmD,GAC7C,IAAIgC,EAAKhC,EAAEjD,MAAMqD,OAAO,IAAMT,EAAQ,MAAQA,EAAQ,IAAK,MAC3D,OAAkB,IAAdqC,EAAGhG,OAAqB+F,EAAIlF,OAAOmF,EAAG,IACnCD,EAAIlF,OAAOmF,EAAG3B,OAAO5D,SAASO,KAAI,SAAUiF,GAC/C,OAAI7B,OAAO,IAAMT,GAAOY,KAAK0B,GAClBN,KAAKG,MAAMG,EAAElF,MAAM4C,GAAO,IAEzBsC,QAEjB","sources":["webpack://@web3os-core/kernel/./node_modules/.pnpm/arg@5.0.2/node_modules/arg/index.js","webpack://@web3os-core/kernel/./src/modules/lang/index.js","webpack://@web3os-core/kernel/./src/modules/lang/locales/de-DE.js","webpack://@web3os-core/kernel/./src/modules/lang/locales/index.js","webpack://@web3os-core/kernel/./node_modules/.pnpm/shell-quote@1.7.3/node_modules/shell-quote/index.js"],"sourcesContent":["const flagSymbol = Symbol('arg flag');\n\nclass ArgError extends Error {\n\tconstructor(msg, code) {\n\t\tsuper(msg);\n\t\tthis.name = 'ArgError';\n\t\tthis.code = code;\n\n\t\tObject.setPrototypeOf(this, ArgError.prototype);\n\t}\n}\n\nfunction arg(\n\topts,\n\t{\n\t\targv = process.argv.slice(2),\n\t\tpermissive = false,\n\t\tstopAtPositional = false\n\t} = {}\n) {\n\tif (!opts) {\n\t\tthrow new ArgError(\n\t\t\t'argument specification object is required',\n\t\t\t'ARG_CONFIG_NO_SPEC'\n\t\t);\n\t}\n\n\tconst result = { _: [] };\n\n\tconst aliases = {};\n\tconst handlers = {};\n\n\tfor (const key of Object.keys(opts)) {\n\t\tif (!key) {\n\t\t\tthrow new ArgError(\n\t\t\t\t'argument key cannot be an empty string',\n\t\t\t\t'ARG_CONFIG_EMPTY_KEY'\n\t\t\t);\n\t\t}\n\n\t\tif (key[0] !== '-') {\n\t\t\tthrow new ArgError(\n\t\t\t\t`argument key must start with '-' but found: '${key}'`,\n\t\t\t\t'ARG_CONFIG_NONOPT_KEY'\n\t\t\t);\n\t\t}\n\n\t\tif (key.length === 1) {\n\t\t\tthrow new ArgError(\n\t\t\t\t`argument key must have a name; singular '-' keys are not allowed: ${key}`,\n\t\t\t\t'ARG_CONFIG_NONAME_KEY'\n\t\t\t);\n\t\t}\n\n\t\tif (typeof opts[key] === 'string') {\n\t\t\taliases[key] = opts[key];\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet type = opts[key];\n\t\tlet isFlag = false;\n\n\t\tif (\n\t\t\tArray.isArray(type) &&\n\t\t\ttype.length === 1 &&\n\t\t\ttypeof type[0] === 'function'\n\t\t) {\n\t\t\tconst [fn] = type;\n\t\t\ttype = (value, name, prev = []) => {\n\t\t\t\tprev.push(fn(value, name, prev[prev.length - 1]));\n\t\t\t\treturn prev;\n\t\t\t};\n\t\t\tisFlag = fn === Boolean || fn[flagSymbol] === true;\n\t\t} else if (typeof type === 'function') {\n\t\t\tisFlag = type === Boolean || type[flagSymbol] === true;\n\t\t} else {\n\t\t\tthrow new ArgError(\n\t\t\t\t`type missing or not a function or valid array type: ${key}`,\n\t\t\t\t'ARG_CONFIG_VAD_TYPE'\n\t\t\t);\n\t\t}\n\n\t\tif (key[1] !== '-' && key.length > 2) {\n\t\t\tthrow new ArgError(\n\t\t\t\t`short argument keys (with a single hyphen) must have only one character: ${key}`,\n\t\t\t\t'ARG_CONFIG_SHORTOPT_TOOLONG'\n\t\t\t);\n\t\t}\n\n\t\thandlers[key] = [type, isFlag];\n\t}\n\n\tfor (let i = 0, len = argv.length; i < len; i++) {\n\t\tconst wholeArg = argv[i];\n\n\t\tif (stopAtPositional && result._.length > 0) {\n\t\t\tresult._ = result._.concat(argv.slice(i));\n\t\t\tbreak;\n\t\t}\n\n\t\tif (wholeArg === '--') {\n\t\t\tresult._ = result._.concat(argv.slice(i + 1));\n\t\t\tbreak;\n\t\t}\n\n\t\tif (wholeArg.length > 1 && wholeArg[0] === '-') {\n\t\t\t/* eslint-disable operator-linebreak */\n\t\t\tconst separatedArguments =\n\t\t\t\twholeArg[1] === '-' || wholeArg.length === 2\n\t\t\t\t\t? [wholeArg]\n\t\t\t\t\t: wholeArg\n\t\t\t\t\t\t\t.slice(1)\n\t\t\t\t\t\t\t.split('')\n\t\t\t\t\t\t\t.map((a) => `-${a}`);\n\t\t\t/* eslint-enable operator-linebreak */\n\n\t\t\tfor (let j = 0; j < separatedArguments.length; j++) {\n\t\t\t\tconst arg = separatedArguments[j];\n\t\t\t\tconst [originalArgName, argStr] =\n\t\t\t\t\targ[1] === '-' ? arg.split(/=(.*)/, 2) : [arg, undefined];\n\n\t\t\t\tlet argName = originalArgName;\n\t\t\t\twhile (argName in aliases) {\n\t\t\t\t\targName = aliases[argName];\n\t\t\t\t}\n\n\t\t\t\tif (!(argName in handlers)) {\n\t\t\t\t\tif (permissive) {\n\t\t\t\t\t\tresult._.push(arg);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new ArgError(\n\t\t\t\t\t\t\t`unknown or unexpected option: ${originalArgName}`,\n\t\t\t\t\t\t\t'ARG_UNKNOWN_OPTION'\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst [type, isFlag] = handlers[argName];\n\n\t\t\t\tif (!isFlag && j + 1 < separatedArguments.length) {\n\t\t\t\t\tthrow new ArgError(\n\t\t\t\t\t\t`option requires argument (but was followed by another short argument): ${originalArgName}`,\n\t\t\t\t\t\t'ARG_MISSING_REQUIRED_SHORTARG'\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (isFlag) {\n\t\t\t\t\tresult[argName] = type(true, argName, result[argName]);\n\t\t\t\t} else if (argStr === undefined) {\n\t\t\t\t\tif (\n\t\t\t\t\t\targv.length < i + 2 ||\n\t\t\t\t\t\t(argv[i + 1].length > 1 &&\n\t\t\t\t\t\t\targv[i + 1][0] === '-' &&\n\t\t\t\t\t\t\t!(\n\t\t\t\t\t\t\t\targv[i + 1].match(/^-?\\d*(\\.(?=\\d))?\\d*$/) &&\n\t\t\t\t\t\t\t\t(type === Number ||\n\t\t\t\t\t\t\t\t\t// eslint-disable-next-line no-undef\n\t\t\t\t\t\t\t\t\t(typeof BigInt !== 'undefined' && type === BigInt))\n\t\t\t\t\t\t\t))\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst extended =\n\t\t\t\t\t\t\toriginalArgName === argName ? '' : ` (alias for ${argName})`;\n\t\t\t\t\t\tthrow new ArgError(\n\t\t\t\t\t\t\t`option requires argument: ${originalArgName}${extended}`,\n\t\t\t\t\t\t\t'ARG_MISSING_REQUIRED_LONGARG'\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tresult[argName] = type(argv[i + 1], argName, result[argName]);\n\t\t\t\t\t++i;\n\t\t\t\t} else {\n\t\t\t\t\tresult[argName] = type(argStr, argName, result[argName]);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tresult._.push(wholeArg);\n\t\t}\n\t}\n\n\treturn result;\n}\n\narg.flag = (fn) => {\n\tfn[flagSymbol] = true;\n\treturn fn;\n};\n\n// Utility types\narg.COUNT = arg.flag((v, name, existingCount) => (existingCount || 0) + 1);\n\n// Expose error class\narg.ArgError = ArgError;\n\nmodule.exports = arg;\n","import arg from 'arg'\nimport colors from 'ansi-colors'\nimport { parse as cliParse } from 'shell-quote'\n\nimport locales from './locales'\nfor (const [key, data] of Object.entries(locales)) Kernel.i18n.addResourceBundle(key, 'app', data, true)\nconst { t } = Kernel.i18n\n\nexport const name = 'lang'\nexport const version = '0.1.0'\nexport const description = t('app:lang.description', 'Internationalization Utility')\n\nexport const help = `\n  ${t('Usage', 'Usage')}:\n    lang                            ${t('app:lang.helpShowCurrentLanguage', 'Show the current system language')}\n    lang <${t('language', 'Language')}>                 ${t('app:lang.helpSetLanguage', 'Set the system language')}\n\n  ${t('Options', 'Options')}:\n    --help                          ${t('printThisHelpMessage', 'Print this help message')}\n    --version                       ${t('printVersionInformation', 'Print the version information')}\n`\n\nexport const spec = {\n  '--help': Boolean,\n  '--version': Boolean\n}\n\nexport async function run (term, context = '') {\n  const args = arg(spec, { argv: cliParse(context) })\n  if (args['--version']) return term.log(version)\n  if (args['--help']) return term.log(help)\n\n  args.terminal = term\n\n  if (context === '') return term.log(Kernel.i18n.language)\n  Kernel.i18n.changeLanguage(context)\n}\n","export default {\n  lang: {\n    description: 'Internationalisierungsdienstprogramm',\n    helpShowCurrentLanguage: 'Zeigt die aktuelle Systemsprache an',\n    helpSetLanguage: 'Stellen Sie die Systemsprache ein'\n  }\n}\n","import deDE from './de-DE'\n\nexport default {\n  de: deDE\n}\n","exports.quote = function (xs) {\n    return xs.map(function (s) {\n        if (s && typeof s === 'object') {\n            return s.op.replace(/(.)/g, '\\\\$1');\n        }\n        else if (/[\"\\s]/.test(s) && !/'/.test(s)) {\n            return \"'\" + s.replace(/(['\\\\])/g, '\\\\$1') + \"'\";\n        }\n        else if (/[\"'\\s]/.test(s)) {\n            return '\"' + s.replace(/([\"\\\\$`!])/g, '\\\\$1') + '\"';\n        }\n        else {\n            return String(s).replace(/([A-Za-z]:)?([#!\"$&'()*,:;<=>?@\\[\\\\\\]^`{|}])/g, '$1\\\\$2');\n        }\n    }).join(' ');\n};\n\n// '<(' is process substitution operator and\n// can be parsed the same as control operator\nvar CONTROL = '(?:' + [\n    '\\\\|\\\\|', '\\\\&\\\\&', ';;', '\\\\|\\\\&', '\\\\<\\\\(', '>>', '>\\\\&', '[&;()|<>]'\n].join('|') + ')';\nvar META = '|&;()<> \\\\t';\nvar BAREWORD = '(\\\\\\\\[\\'\"' + META + ']|[^\\\\s\\'\"' + META + '])+';\nvar SINGLE_QUOTE = '\"((\\\\\\\\\"|[^\"])*?)\"';\nvar DOUBLE_QUOTE = '\\'((\\\\\\\\\\'|[^\\'])*?)\\'';\n\nvar TOKEN = '';\nfor (var i = 0; i < 4; i++) {\n    TOKEN += (Math.pow(16,8)*Math.random()).toString(16);\n}\n\nexports.parse = function (s, env, opts) {\n    var mapped = parse(s, env, opts);\n    if (typeof env !== 'function') return mapped;\n    return mapped.reduce(function (acc, s) {\n        if (typeof s === 'object') return acc.concat(s);\n        var xs = s.split(RegExp('(' + TOKEN + '.*?' + TOKEN + ')', 'g'));\n        if (xs.length === 1) return acc.concat(xs[0]);\n        return acc.concat(xs.filter(Boolean).map(function (x) {\n            if (RegExp('^' + TOKEN).test(x)) {\n                return JSON.parse(x.split(TOKEN)[1]);\n            }\n            else return x;\n        }));\n    }, []);\n};\n\nfunction parse (s, env, opts) {\n    var chunker = new RegExp([\n        '(' + CONTROL + ')', // control chars\n        '(' + BAREWORD + '|' + SINGLE_QUOTE + '|' + DOUBLE_QUOTE + ')*'\n    ].join('|'), 'g');\n    var match = s.match(chunker).filter(Boolean);\n    var commented = false;\n\n    if (!match) return [];\n    if (!env) env = {};\n    if (!opts) opts = {};\n    return match.map(function (s, j) {\n        if (commented) {\n            return;\n        }\n        if (RegExp('^' + CONTROL + '$').test(s)) {\n            return { op: s };\n        }\n\n        // Hand-written scanner/parser for Bash quoting rules:\n        //\n        //  1. inside single quotes, all characters are printed literally.\n        //  2. inside double quotes, all characters are printed literally\n        //     except variables prefixed by '$' and backslashes followed by\n        //     either a double quote or another backslash.\n        //  3. outside of any quotes, backslashes are treated as escape\n        //     characters and not printed (unless they are themselves escaped)\n        //  4. quote context can switch mid-token if there is no whitespace\n        //     between the two quote contexts (e.g. all'one'\"token\" parses as\n        //     \"allonetoken\")\n        var SQ = \"'\";\n        var DQ = '\"';\n        var DS = '$';\n        var BS = opts.escape || '\\\\';\n        var quote = false;\n        var esc = false;\n        var out = '';\n        var isGlob = false;\n\n        for (var i = 0, len = s.length; i < len; i++) {\n            var c = s.charAt(i);\n            isGlob = isGlob || (!quote && (c === '*' || c === '?'));\n            if (esc) {\n                out += c;\n                esc = false;\n            }\n            else if (quote) {\n                if (c === quote) {\n                    quote = false;\n                }\n                else if (quote == SQ) {\n                    out += c;\n                }\n                else { // Double quote\n                    if (c === BS) {\n                        i += 1;\n                        c = s.charAt(i);\n                        if (c === DQ || c === BS || c === DS) {\n                            out += c;\n                        } else {\n                            out += BS + c;\n                        }\n                    }\n                    else if (c === DS) {\n                        out += parseEnvVar();\n                    }\n                    else {\n                        out += c;\n                    }\n                }\n            }\n            else if (c === DQ || c === SQ) {\n                quote = c;\n            }\n            else if (RegExp('^' + CONTROL + '$').test(c)) {\n                return { op: s };\n            }\n            else if (RegExp('^#$').test(c)) {\n                commented = true;\n                if (out.length){\n                    return [out, { comment: s.slice(i+1) + match.slice(j+1).join(' ') }];\n                }\n                return [{ comment: s.slice(i+1) + match.slice(j+1).join(' ') }];\n            }\n            else if (c === BS) {\n                esc = true;\n            }\n            else if (c === DS) {\n                out += parseEnvVar();\n            }\n            else out += c;\n        }\n\n        if (isGlob) return {op: 'glob', pattern: out};\n\n        return out;\n\n        function parseEnvVar() {\n            i += 1;\n            var varend, varname;\n            //debugger\n            if (s.charAt(i) === '{') {\n                i += 1;\n                if (s.charAt(i) === '}') {\n                    throw new Error(\"Bad substitution: \" + s.substr(i - 2, 3));\n                }\n                varend = s.indexOf('}', i);\n                if (varend < 0) {\n                    throw new Error(\"Bad substitution: \" + s.substr(i));\n                }\n                varname = s.substr(i, varend - i);\n                i = varend;\n            }\n            else if (/[*@#?$!_\\-]/.test(s.charAt(i))) {\n                varname = s.charAt(i);\n                i += 1;\n            }\n            else {\n                varend = s.substr(i).match(/[^\\w\\d_]/);\n                if (!varend) {\n                    varname = s.substr(i);\n                    i = s.length;\n                } else {\n                    varname = s.substr(i, varend.index);\n                    i += varend.index - 1;\n                }\n            }\n            return getVar(null, '', varname);\n        }\n    })\n    // finalize parsed aruments\n    .reduce(function(prev, arg){\n        if (arg === undefined){\n            return prev;\n        }\n        return prev.concat(arg);\n    },[]);\n\n    function getVar (_, pre, key) {\n        var r = typeof env === 'function' ? env(key) : env[key];\n        if (r === undefined && key != '')\n            r = '';\n        else if (r === undefined)\n            r = '$';\n\n        if (typeof r === 'object') {\n            return pre + TOKEN + JSON.stringify(r) + TOKEN;\n        }\n        else return pre + r;\n    }\n}\n"],"names":["flagSymbol","Symbol","ArgError","Error","constructor","msg","code","super","this","name","Object","setPrototypeOf","prototype","arg","opts","argv","process","slice","permissive","stopAtPositional","result","_","aliases","handlers","key","keys","length","type","isFlag","Array","isArray","fn","value","prev","push","Boolean","i","len","wholeArg","concat","separatedArguments","split","map","a","j","originalArgName","argStr","undefined","argName","match","Number","BigInt","flag","COUNT","v","existingCount","module","exports","entries","locales","data","Kernel","i18n","addResourceBundle","t","version","description","help","spec","run","term","context","args","cliParse","log","terminal","language","changeLanguage","lang","helpShowCurrentLanguage","helpSetLanguage","de","deDE","CONTROL","join","TOKEN","Math","pow","random","toString","s","env","mapped","chunker","RegExp","filter","commented","test","op","BS","escape","quote","esc","out","isGlob","c","charAt","parseEnvVar","comment","pattern","varend","varname","pre","r","substr","indexOf","index","JSON","stringify","reduce","parse","acc","xs","x"],"sourceRoot":""}