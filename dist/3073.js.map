{"version":3,"file":"3073.js","mappings":";mXACA,4tNADO,IAeHA,EAfSC,EAAO,OACPC,EAAU,QACVC,EAAc,uBACdC,EAAO,2QAaPC,EAAgBC,OAAOC,eAAP,YAAsB,mHAAoBC,YAEhE,SAAeC,IAAtB,iEAAO,6GAAwBC,EAAxB,+BAA8B,aAAUC,EAAxC,+BAA+CC,WAAWC,SAA1D,SAEGC,EAAO,IAAIT,EAAc,OAAQ,MAAOK,GAF3C,SAGmBI,EAAKH,EAAMA,EAAKI,KAHnC,QAGGC,EAHH,SAIUC,QAAQC,IAAIF,GACzBL,EAAKQ,IAAIH,GALN,kDAOHC,QAAQG,MAAR,MACAT,EAAKQ,IAAI,KAAIE,SARV,yBAUHV,EAAKW,SAVF,qGAcQ,gBAAf,iEAAe,WAAgBX,EAAMY,GAAtB,8EAGPC,EAAQC,SAASC,cAAc,QAC/BC,MAAMC,OAAS,OAEfC,EAAMlB,EAAKmB,OAAOC,QAAQC,OAAO,CACrCC,MAAO,OACPT,MAAAA,EACAU,KAAK,EACLC,EAAG,SACHC,EAAG,SACHC,QAAS,WACPC,cAAcC,GACdtB,QAAQE,IAAMnB,GAA0CiB,QAAQE,IAChEnB,EAAqB,QAIzBA,EAAqBiB,QAAQE,IAC7BF,QAAQE,IAAM,WACZqB,EAASrB,IAAT,MAAAqB,EAAgBC,WAChBzC,EAAmB0C,MAAMzB,QAASwB,YAGpCZ,EAAIc,OAAOC,KAAKjB,MAAMkB,UAAY,SAE5BL,EAAW7B,EAAKmB,OAAOgB,eAAed,OAAO,CACjDF,OAAQnB,EAAKmB,OACbiB,SAAU,GACVC,aAAc,KACdC,eAAgB,CACd,CACEhD,KAAM,SACNiD,IAAK,SAAAvC,GAAUA,EAAKwC,QAASxC,EAAKW,WAEpC,CACErB,KAAM,QACNiD,IAAK,kBAAMrB,EAAIc,OAAOS,aAK5BZ,EAAS/B,QAAU,SAAA4C,GAAI,OAAI5C,EAAQ4C,EAAMb,IAEzCA,EAASc,KAAK9B,GACdA,EAAM+B,cAAc,UAAU5B,MAAM6B,SAAW,QAC/CjB,EAAckB,aAAY,kBAAMjB,EAASkB,QAAO,KAEhDlB,EAASmB,QACTnB,EAASrB,IAAT,oBAA0BjB,IAC1BsC,EAASrB,IAAIf,GACboC,EAASlB,SApDI","sources":["webpack://@web3os-core/kernel/./src/modules/repl/index.js"],"sourcesContent":["export const name = 'repl'\nexport const version = '0.1.0'\nexport const description = 'Read Eval Print Loop'\nexport const help = `\n  An interactive Javascript command line\n\n  To store and retrieve values, either use the global/window object or the \"env\" object.\n\n  E.g.:\n    > env.testValue = 'test!'\n    > console.log(env)\n\n  Use the command \"$custom\" to see builtin REPL commands\n`\n\nlet originalConsoleLog\nexport const AsyncFunction = Object.getPrototypeOf(async function(){}).constructor\n\nexport async function execute (cmd = () => {}, term = globalThis.Terminal) {\n  try {\n    const func = new AsyncFunction('term', 'env', cmd)\n    const results = await func(term, term.env)\n    if (results) console.dir(results)\n    term.log(results)\n  } catch (err) {\n    console.error(err)\n    term.log(err.message)\n  } finally {\n    term.prompt()\n  }\n}\n\nexport default async function (term, context) {\n  let fitInterval\n\n  const mount = document.createElement('div')\n  mount.style.height = '100%'\n\n  const app = term.kernel.windows.create({\n    title: 'REPL',\n    mount,\n    max: true,\n    x: 'center',\n    y: 'center',\n    onclose: () => {\n      clearInterval(fitInterval)\n      console.log = originalConsoleLog ? originalConsoleLog : console.log\n      originalConsoleLog = null\n    }\n  })\n\n  originalConsoleLog = console.log\n  console.log = function () {\n    replTerm.log(...arguments)\n    originalConsoleLog.apply(console, arguments)\n  }\n\n  app.window.body.style.overflowY = 'hidden'\n\n  const replTerm = term.kernel.Web3osTerminal.create({\n    kernel: term.kernel,\n    fontSize: 22,\n    promptFormat: '> ',\n    customCommands: [\n      {\n        name: '.clear',\n        run: term => { term.clear(); term.prompt() }\n      },\n      {\n        name: '.exit',\n        run: () => app.window.close()\n      }\n    ]\n  })\n\n  replTerm.execute = line => execute(line, replTerm)\n\n  replTerm.open(mount)\n  mount.querySelector('.xterm').style.position = 'unset'\n  fitInterval = setInterval(() => replTerm.fit(), 200)\n\n  replTerm.focus()\n  replTerm.log(`3os REPL v${version}`)\n  replTerm.log(help)\n  replTerm.prompt()\n}\n"],"names":["originalConsoleLog","name","version","description","help","AsyncFunction","Object","getPrototypeOf","constructor","execute","cmd","term","globalThis","Terminal","func","env","results","console","dir","log","error","message","prompt","context","mount","document","createElement","style","height","app","kernel","windows","create","title","max","x","y","onclose","clearInterval","fitInterval","replTerm","arguments","apply","window","body","overflowY","Web3osTerminal","fontSize","promptFormat","customCommands","run","clear","close","line","open","querySelector","position","setInterval","fit","focus"],"sourceRoot":""}