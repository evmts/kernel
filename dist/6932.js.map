{"version":3,"file":"6932.js","mappings":"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","sources":["webpack://@web3os-core/kernel/./src/modules/backend/index.js"],"sourcesContent":["import colors from 'ansi-colors'\r\nimport { term } from '../account'\r\n\r\nexport const name = 'backend'\r\nexport const description = 'Manages the connection to a Backend server'\r\nexport const help = `\r\n  Usage:\r\n    backend <command> <arguments>      Send a command to the currently connected Backend server\r\n\r\n  Commands:\r\n    connect <host:port>               Connect to a Backend server at host:port\r\n    auth                              Sign a message with your wallet to authenticate to the server\r\n    shell                             Run a bash shell on a server with admin privileges\r\n\r\n`\r\n\r\nlet kernel = globalThis.Kernel\r\nlet oldPrompt\r\nexport let connection\r\n\r\nasync function authSign ({ address, key }) {\r\n  const isAnonymous = /^anon\\:/.test(address)\r\n  console.log('authSign', { isAnonymous, address, key })\r\n  if (isAnonymous) throw new Error('Cannot authenticate without a connected wallet')\r\n  const signature = await kernel.modules.account.sign(JSON.stringify({ address, key }))\r\n  connection.send(`auth-verify ${signature}`)\r\n}\r\n\r\nexport async function launchShell (options = {}) {\r\n  if (connection?.readyState !== 1) throw new Error('Not connected')\r\n  let win\r\n\r\n  const newTerm = kernel.Web3osTerminal.create({\r\n    fontFamily: options.fontFamily || `'Fira Mono', monospace`,\r\n    fontSize: options.fontSize || 18,\r\n    fontWeight: options.fontWeight || 900,\r\n    theme: options.theme || { background: '#131820' },\r\n    socket: connection\r\n  })\r\n\r\n  const container = document.createElement('div')\r\n  container.style.width = '100%'\r\n  container.style.height = '100%'\r\n  newTerm.open(container)\r\n\r\n  win = kernel.windows.create({\r\n    title: 'Backend Shell',\r\n    mount: container,\r\n    width: options.windowWidth || '75%',\r\n    height: options.windowHeight || '70%'\r\n  })\r\n\r\n  win.term = newTerm\r\n\r\n  setInterval(newTerm.fit, 100)\r\n\r\n  connection.send('shell')\r\n}\r\n\r\nexport async function run (terminal, context = '') {\r\n  kernel = terminal.kernel\r\n  let { log } = kernel\r\n\r\n  if (context.split(' ')[0] === 'shell') return launchShell()\r\n\r\n  if (context.split(' ')[0] === 'connect') {\r\n    if (connection?.readyState === 1) throw new Error('Already connected')\r\n    let host = context.split(' ')[1]\r\n    if (!host) host = 'localhost:1995'\r\n    if (!host.includes(':')) host += ':1995'\r\n\r\n    log(colors.success(`Connecting to ${host}...`))\r\n\r\n    connection = new WebSocket(`ws://${host}`)\r\n\r\n    connection.onerror = err => {\r\n      console.error(err)\r\n      log(colors.danger('\\nBackend connection error'))\r\n      terminal.prompt()\r\n    }\r\n\r\n    connection.onopen = () => {\r\n      const initHandler = async e => {\r\n        console.log('backend:init', e.data)\r\n\r\n        if (e.data === 'HI') return connection.send(kernel.modules.account.account.address)\r\n        if (e.data.split(' ')[0] === 'SUCCESS') {\r\n          log(colors.success(\"\\nWe're in. ðŸš€\"))\r\n          oldPrompt = terminal.promptFormat\r\n          terminal.prompt(terminal.promptFormat.replace('#', `${colors.warning(`{${host}}`)}#`))\r\n\r\n          const handler = async ({ data }) => {\r\n            data = data[0] === '{' ? JSON.parse(data) : data\r\n            console.log('backend:handler', data)\r\n            if (typeof data === 'string') return log(data)\r\n\r\n            const { address, key } = data.payload\r\n            if (!address) throw new Error('Payload has no address')\r\n            if (!key) throw new Error('Payload has no key')\r\n\r\n            try {\r\n              switch (data.cmd) {\r\n                case 'authSign':\r\n                  await authSign(data.payload)\r\n                  break\r\n                case 'stream:start':\r\n                  console.log('stream:start')\r\n                  connection.removeEventListener('message', handler)\r\n                  break\r\n                case 'stream:end':\r\n                  console.log('stream:end')\r\n                  connection.addEventListener('message', handler)\r\n                  break\r\n                default:\r\n                  log('\\n' + data)\r\n                  terminal.prompt()\r\n              }\r\n            } catch (err) {\r\n              console.error(err)\r\n              log(err.message)\r\n              terminal.prompt()\r\n            }\r\n          }\r\n\r\n          connection.removeEventListener('message', initHandler)\r\n          connection.addEventListener('message', handler)\r\n        } else {\r\n          console.error(e)\r\n          terminal.log(e.data)\r\n          throw new Error(e.data)\r\n        }\r\n      }\r\n\r\n      connection.addEventListener('message', initHandler)\r\n\r\n      connection.onclose = () => {\r\n        const msg = 'Connection to Backend was closed'\r\n        terminal.log(msg)\r\n        terminal.prompt(oldPrompt)\r\n      }\r\n    }\r\n  } else {\r\n    connection?.send(context)\r\n  }\r\n}\r\n\r\n"],"names":["i","oldPrompt","connection","name","description","help","kernel","globalThis","Kernel","authSign","address","key","isAnonymous","test","console","log","Error","modules","account","sign","JSON","stringify","signature","send","launchShell","options","readyState","newTerm","Web3osTerminal","create","fontFamily","fontSize","fontWeight","theme","background","socket","container","document","createElement","style","width","height","open","windows","title","mount","windowWidth","windowHeight","term","setInterval","fit","run","terminal","context","split","host","includes","colors","WebSocket","onerror","err","error","prompt","onopen","initHandler","e","data","promptFormat","replace","handler","parse","payload","cmd","removeEventListener","addEventListener","message","onclose"],"sourceRoot":""}