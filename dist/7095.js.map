{"version":3,"file":"7095.js","mappings":";qiBACA,8hGAAAA,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,0oDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,kkBAGO,IAAMC,EAAO,OACPC,EAAc,2DACdC,EAAO,oCAKb,SAASC,EAAaC,EAAMC,EAAKC,GACtC,IAAMC,EAAU,IAAIC,MAOpB,OANAD,EAAQE,IAAMJ,EACdE,EAAQG,MAAMC,UAAY,UAC1BJ,EAAQG,MAAME,MAAQ,OACtBL,EAAQG,MAAMG,OAAS,OACvBN,EAAQO,OAAS,aAEVP,EAGF,SAASQ,EAAaX,EAAMC,GACjC,IAAME,EAAUS,SAASC,cAAc,SAQvC,OAPAV,EAAQW,MAAO,EACfX,EAAQY,UAAW,EACnBZ,EAAQa,UAAW,EACnBb,EAAQE,IAAMJ,EACdE,EAAQG,MAAME,MAAQ,OACtBL,EAAQG,MAAMG,OAAS,OAEhBN,EAGF,SAASc,EAAcjB,EAAMC,GAClC,IAAME,EAAUS,SAASC,cAAc,UAMvC,OALAV,EAAQe,KAAOjB,EACfE,EAAQgB,KAAOnB,EACfG,EAAQG,MAAMG,OAAS,OACvBN,EAAQG,MAAME,MAAQ,OAEfL,EAGF,SAASiB,EAAapB,EAAMC,EAAKC,GACtC,IAAMC,EAAWS,SAASC,cAAc,SASxC,OARAV,EAAQY,UAAW,EACnBZ,EAAQa,UAAW,EACnBb,EAAQE,IAAMJ,EACdE,EAAQG,MAAME,MAAQ,OACtBL,EAAQkB,iBAAiB,cAAc,WACrCnB,EAAUoB,OAAOC,OAAOpB,EAAQqB,YAAarB,EAAQsB,aAAe,OAG/DtB,EAGF,SAAeuB,EAAtB,sEAAO,WAAoBC,EAAUC,GAA9B,4FACGC,EAAgBF,EAAhBE,OAAQC,EAAQH,EAARG,IACVC,EAAOF,EAAPE,GAEDH,GAAyB,KAAbA,EAJZ,yCAIoCE,EAAIE,IAAAA,OAAc,oBAAsB,KAAOlC,IAJnF,UAKL8B,EAAUC,EAAOI,MAAMC,KAAKC,QAAQR,EAASS,IAAKR,GAI5CS,EAAUR,EAAOI,MAAMC,KAAKI,MAAMV,GAClC5B,GAAOuC,EAAAA,EAAAA,QAAOF,EAASG,KAVxB,sBAWY,IAAIC,MAAM,qBAXtB,OAaCvB,EAAO,IAAIwB,KAAK,CAACX,EAAGY,aAAaf,IAAY,CAAET,KAAMnB,IACrDC,EAAM2C,IAAIC,gBAAgB3B,IAE1B4B,EAAUlC,SAASC,cAAc,QAC/BP,MAAMG,OAAS,QAEjBP,EAAY2B,EAAOkB,QAAQC,OAAO,CACtCC,MAAO,GAAF,OAAKrB,GACVsB,MAAOJ,EACPtC,MAAO,MACPC,OAAQ,SAGAa,OAAO6B,KAAK7C,MAAM8C,OAAS,IACrClD,EAAUoB,OAAO6B,KAAK7C,MAAM+C,SAAW,SA3BlC,KA6BGrD,EA7BH,OA8BE,oBA9BF,gCA+BDG,EAAUc,EAAajB,EAAMC,GA/B5B,gCAkCID,EAlCJ,qDAmCG,SAASsD,KAAKtD,KAAOG,EAAUJ,EAAYC,EAAMC,IACjD,SAASqD,KAAKtD,KAAOG,EAAUQ,EAAYX,EAAMC,IACjD,SAASqD,KAAKtD,KAAOG,EAAUiB,EAAYpB,EAAMC,EAAKC,IArCzD,WAwCAC,EAxCA,uBAwCe,IAAIsC,MAAM,qBAxCzB,QAyCLK,EAAQS,OAAOpD,GAzCV","sources":["file:////home/j/code/web3os/@web3os-core/kernel/src/modules/view/index.js"],"sourcesContent":["import path from 'path'\r\nimport { lookup } from 'mime-types'\r\nimport colors from 'ansi-colors'\r\n\r\nexport const name = 'view'\r\nexport const description = 'File viewer for images, videos, audio, and PDF documents'\r\nexport const help = `\r\n  Usage:\r\n    view <filename>\r\n`\r\n\r\nexport function createImage (mime, url, appWindow) {\r\n  const content = new Image()\r\n  content.src = url\r\n  content.style.objectFit = 'contain'\r\n  content.style.width = '100%'\r\n  content.style.height = '100%'\r\n  content.onload = () => {}\r\n\r\n  return content\r\n}\r\n\r\nexport function createVideo (mime, url) {\r\n  const content = document.createElement('video')\r\n  content.loop = true\r\n  content.autoplay = true\r\n  content.controls = true\r\n  content.src = url\r\n  content.style.width = '100%'\r\n  content.style.height = '100%'\r\n\r\n  return content\r\n}\r\n\r\nexport function createObject (mime, url) {\r\n  const content = document.createElement('object')\r\n  content.data = url\r\n  content.type = mime\r\n  content.style.height = '100%'\r\n  content.style.width = '100%'\r\n\r\n  return content\r\n}\r\n\r\nexport function createAudio (mime, url, appWindow) {\r\n  const content  = document.createElement('audio')\r\n  content.autoplay = true\r\n  content.controls = true\r\n  content.src = url\r\n  content.style.width = '100%'\r\n  content.addEventListener('loadeddata', () => {\r\n    appWindow.window.resize(content.offsetWidth, content.offsetHeight + 35)\r\n  })\r\n\r\n  return content\r\n}\r\n\r\nexport async function run (terminal, filename) {\r\n  const { kernel, log } = terminal\r\n  let { fs } = kernel\r\n\r\n  if (!filename || filename === '') return log(colors.danger('Invalid filename') + '\\n' + help)\r\n  filename =kernel.utils.path.resolve(terminal.cwd, filename)\r\n\r\n  let type\r\n  let content\r\n  const pathInfo =kernel.utils.path.parse(filename)\r\n  const mime = lookup(pathInfo.ext)\r\n  if (!mime) throw new Error('Unknown file type')\r\n\r\n  const data = new Blob([fs.readFileSync(filename)], { type: mime })\r\n  const url = URL.createObjectURL(data)\r\n\r\n  const wrapper = document.createElement('div')\r\n  wrapper.style.height = '100%'\r\n\r\n  const appWindow = kernel.windows.create({\r\n    title: `${filename}`,\r\n    mount: wrapper,\r\n    width: '60%',\r\n    height: '60%'\r\n  })\r\n\r\n  appWindow.window.body.style.margin = '0'\r\n  appWindow.window.body.style.overflow = 'hidden'\r\n\r\n  switch (mime) {\r\n    case 'application/pdf':\r\n      content = createObject(mime, url, appWindow)\r\n      break\r\n    default:\r\n      if (!mime) break\r\n      if (/^image/.test(mime)) content = createImage(mime, url, appWindow)\r\n      if (/^video/.test(mime)) content = createVideo(mime, url, appWindow)\r\n      if (/^audio/.test(mime)) content = createAudio(mime, url, appWindow)\r\n  }\r\n\r\n  if (!content) throw new Error('Unknown file type')\r\n  wrapper.append(content)\r\n}\r\n"],"names":["i","name","description","help","createImage","mime","url","appWindow","content","Image","src","style","objectFit","width","height","onload","createVideo","document","createElement","loop","autoplay","controls","createObject","data","type","createAudio","addEventListener","window","resize","offsetWidth","offsetHeight","run","terminal","filename","kernel","log","fs","colors","utils","path","resolve","cwd","pathInfo","parse","lookup","ext","Error","Blob","readFileSync","URL","createObjectURL","wrapper","windows","create","title","mount","body","margin","overflow","test","append"],"sourceRoot":""}