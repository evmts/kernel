{"version":3,"file":"227.js","mappings":"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","sources":["file:////home/j/code/web3os/@web3os-core/kernel/node_modules/.pnpm/arg@5.0.2/node_modules/arg/index.js","file:////home/j/code/web3os/@web3os-core/kernel/src/modules/flix/index.js","file:////home/j/code/web3os/@web3os-core/kernel/node_modules/.pnpm/shell-quote@1.7.3/node_modules/shell-quote/index.js"],"sourcesContent":["const flagSymbol = Symbol('arg flag');\n\nclass ArgError extends Error {\n\tconstructor(msg, code) {\n\t\tsuper(msg);\n\t\tthis.name = 'ArgError';\n\t\tthis.code = code;\n\n\t\tObject.setPrototypeOf(this, ArgError.prototype);\n\t}\n}\n\nfunction arg(\n\topts,\n\t{\n\t\targv = process.argv.slice(2),\n\t\tpermissive = false,\n\t\tstopAtPositional = false\n\t} = {}\n) {\n\tif (!opts) {\n\t\tthrow new ArgError(\n\t\t\t'argument specification object is required',\n\t\t\t'ARG_CONFIG_NO_SPEC'\n\t\t);\n\t}\n\n\tconst result = { _: [] };\n\n\tconst aliases = {};\n\tconst handlers = {};\n\n\tfor (const key of Object.keys(opts)) {\n\t\tif (!key) {\n\t\t\tthrow new ArgError(\n\t\t\t\t'argument key cannot be an empty string',\n\t\t\t\t'ARG_CONFIG_EMPTY_KEY'\n\t\t\t);\n\t\t}\n\n\t\tif (key[0] !== '-') {\n\t\t\tthrow new ArgError(\n\t\t\t\t`argument key must start with '-' but found: '${key}'`,\n\t\t\t\t'ARG_CONFIG_NONOPT_KEY'\n\t\t\t);\n\t\t}\n\n\t\tif (key.length === 1) {\n\t\t\tthrow new ArgError(\n\t\t\t\t`argument key must have a name; singular '-' keys are not allowed: ${key}`,\n\t\t\t\t'ARG_CONFIG_NONAME_KEY'\n\t\t\t);\n\t\t}\n\n\t\tif (typeof opts[key] === 'string') {\n\t\t\taliases[key] = opts[key];\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet type = opts[key];\n\t\tlet isFlag = false;\n\n\t\tif (\n\t\t\tArray.isArray(type) &&\n\t\t\ttype.length === 1 &&\n\t\t\ttypeof type[0] === 'function'\n\t\t) {\n\t\t\tconst [fn] = type;\n\t\t\ttype = (value, name, prev = []) => {\n\t\t\t\tprev.push(fn(value, name, prev[prev.length - 1]));\n\t\t\t\treturn prev;\n\t\t\t};\n\t\t\tisFlag = fn === Boolean || fn[flagSymbol] === true;\n\t\t} else if (typeof type === 'function') {\n\t\t\tisFlag = type === Boolean || type[flagSymbol] === true;\n\t\t} else {\n\t\t\tthrow new ArgError(\n\t\t\t\t`type missing or not a function or valid array type: ${key}`,\n\t\t\t\t'ARG_CONFIG_VAD_TYPE'\n\t\t\t);\n\t\t}\n\n\t\tif (key[1] !== '-' && key.length > 2) {\n\t\t\tthrow new ArgError(\n\t\t\t\t`short argument keys (with a single hyphen) must have only one character: ${key}`,\n\t\t\t\t'ARG_CONFIG_SHORTOPT_TOOLONG'\n\t\t\t);\n\t\t}\n\n\t\thandlers[key] = [type, isFlag];\n\t}\n\n\tfor (let i = 0, len = argv.length; i < len; i++) {\n\t\tconst wholeArg = argv[i];\n\n\t\tif (stopAtPositional && result._.length > 0) {\n\t\t\tresult._ = result._.concat(argv.slice(i));\n\t\t\tbreak;\n\t\t}\n\n\t\tif (wholeArg === '--') {\n\t\t\tresult._ = result._.concat(argv.slice(i + 1));\n\t\t\tbreak;\n\t\t}\n\n\t\tif (wholeArg.length > 1 && wholeArg[0] === '-') {\n\t\t\t/* eslint-disable operator-linebreak */\n\t\t\tconst separatedArguments =\n\t\t\t\twholeArg[1] === '-' || wholeArg.length === 2\n\t\t\t\t\t? [wholeArg]\n\t\t\t\t\t: wholeArg\n\t\t\t\t\t\t\t.slice(1)\n\t\t\t\t\t\t\t.split('')\n\t\t\t\t\t\t\t.map((a) => `-${a}`);\n\t\t\t/* eslint-enable operator-linebreak */\n\n\t\t\tfor (let j = 0; j < separatedArguments.length; j++) {\n\t\t\t\tconst arg = separatedArguments[j];\n\t\t\t\tconst [originalArgName, argStr] =\n\t\t\t\t\targ[1] === '-' ? arg.split(/=(.*)/, 2) : [arg, undefined];\n\n\t\t\t\tlet argName = originalArgName;\n\t\t\t\twhile (argName in aliases) {\n\t\t\t\t\targName = aliases[argName];\n\t\t\t\t}\n\n\t\t\t\tif (!(argName in handlers)) {\n\t\t\t\t\tif (permissive) {\n\t\t\t\t\t\tresult._.push(arg);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new ArgError(\n\t\t\t\t\t\t\t`unknown or unexpected option: ${originalArgName}`,\n\t\t\t\t\t\t\t'ARG_UNKNOWN_OPTION'\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst [type, isFlag] = handlers[argName];\n\n\t\t\t\tif (!isFlag && j + 1 < separatedArguments.length) {\n\t\t\t\t\tthrow new ArgError(\n\t\t\t\t\t\t`option requires argument (but was followed by another short argument): ${originalArgName}`,\n\t\t\t\t\t\t'ARG_MISSING_REQUIRED_SHORTARG'\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (isFlag) {\n\t\t\t\t\tresult[argName] = type(true, argName, result[argName]);\n\t\t\t\t} else if (argStr === undefined) {\n\t\t\t\t\tif (\n\t\t\t\t\t\targv.length < i + 2 ||\n\t\t\t\t\t\t(argv[i + 1].length > 1 &&\n\t\t\t\t\t\t\targv[i + 1][0] === '-' &&\n\t\t\t\t\t\t\t!(\n\t\t\t\t\t\t\t\targv[i + 1].match(/^-?\\d*(\\.(?=\\d))?\\d*$/) &&\n\t\t\t\t\t\t\t\t(type === Number ||\n\t\t\t\t\t\t\t\t\t// eslint-disable-next-line no-undef\n\t\t\t\t\t\t\t\t\t(typeof BigInt !== 'undefined' && type === BigInt))\n\t\t\t\t\t\t\t))\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst extended =\n\t\t\t\t\t\t\toriginalArgName === argName ? '' : ` (alias for ${argName})`;\n\t\t\t\t\t\tthrow new ArgError(\n\t\t\t\t\t\t\t`option requires argument: ${originalArgName}${extended}`,\n\t\t\t\t\t\t\t'ARG_MISSING_REQUIRED_LONGARG'\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tresult[argName] = type(argv[i + 1], argName, result[argName]);\n\t\t\t\t\t++i;\n\t\t\t\t} else {\n\t\t\t\t\tresult[argName] = type(argStr, argName, result[argName]);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tresult._.push(wholeArg);\n\t\t}\n\t}\n\n\treturn result;\n}\n\narg.flag = (fn) => {\n\tfn[flagSymbol] = true;\n\treturn fn;\n};\n\n// Utility types\narg.COUNT = arg.flag((v, name, existingCount) => (existingCount || 0) + 1);\n\n// Expose error class\narg.ArgError = ArgError;\n\nmodule.exports = arg;\n","import arg from 'arg'\r\nimport colors from 'ansi-colors'\r\nimport columnify from 'columnify'\r\nimport { parse as cliParse } from 'shell-quote'\r\n\r\nexport const name = 'flix'\r\nexport const version = '0.1.0'\r\nexport const description = 'Watch videos over IPFS'\r\nexport const help = `\r\n  ${colors.magenta.bold('Flix: Watch videos over IPFS')}\r\n\r\n  Usage:\r\n    flix <command> [options]\r\n\r\n  Commands:\r\n    play <cid>                      Play the specified video\r\n    search <name>                   Search for a movie by name\r\n    \r\n  Options:\r\n    --help                          Print this help message\r\n    --version                       Print the version information\r\n`\r\n\r\nexport const spec = {\r\n  '--help': Boolean,\r\n  '--version': Boolean\r\n}\r\n\r\nlet kernel = globalThis.Kernel\r\n\r\nexport function play (cid, args) {\r\n  const video = document.createElement('video')\r\n  video.autoplay = true\r\n  video.controls = true\r\n  video.src = `https://ipfs.io/ipfs/${cid}`\r\n  video.style.width = '100%'\r\n  video.style.height = '100%'\r\n\r\n  const win = kernel.windows.create({\r\n    title: cid,\r\n    mount: video\r\n  })\r\n}\r\n\r\nexport async function search (q, args) {\r\n  const response = await fetch(`https://api.ipfs-search.com/v1/search?q=${q}&type=file&page=${args['--page'] || '0'}`)\r\n  const results = await response.json()\r\n  const data = results.hits\r\n    .filter(hit => hit.mimetype.includes('video'))\r\n    .map(({ hash, mimetype, title }) => ({ hash, mimetype, title: title.replace(/<\\/?[^>]+(>|$)/g, '') }))\r\n\r\n  args.terminal.log(columnify(data, {\r\n    columnSplitter: ' | ',\r\n    columns: ['mimetype', 'title', 'hash'],\r\n    config: {\r\n      mimetype: { minWidth: 15 },\r\n      title: { minWidth: 10, maxWidth: 20 },\r\n      hash: { minWidth: 20 }\r\n    }\r\n  }))\r\n}\r\n\r\nexport async function run (term, context = '') {\r\n  const args = arg(spec, { argv: cliParse(context) })\r\n  if (args['--version']) return term.log(version)\r\n  if (args['--help']) return term.log(help)\r\n\r\n  const cmd = args._?.[0]\r\n  kernel = term.kernel\r\n  args.terminal = term\r\n\r\n  switch (cmd) {\r\n    case 'play':\r\n      return play(args._?.[1], args)\r\n    case 'search':\r\n      return search(args._?.[1], args)\r\n    default:\r\n      return term.log(help)\r\n  }\r\n}\r\n","exports.quote = function (xs) {\n    return xs.map(function (s) {\n        if (s && typeof s === 'object') {\n            return s.op.replace(/(.)/g, '\\\\$1');\n        }\n        else if (/[\"\\s]/.test(s) && !/'/.test(s)) {\n            return \"'\" + s.replace(/(['\\\\])/g, '\\\\$1') + \"'\";\n        }\n        else if (/[\"'\\s]/.test(s)) {\n            return '\"' + s.replace(/([\"\\\\$`!])/g, '\\\\$1') + '\"';\n        }\n        else {\n            return String(s).replace(/([A-Za-z]:)?([#!\"$&'()*,:;<=>?@\\[\\\\\\]^`{|}])/g, '$1\\\\$2');\n        }\n    }).join(' ');\n};\n\n// '<(' is process substitution operator and\n// can be parsed the same as control operator\nvar CONTROL = '(?:' + [\n    '\\\\|\\\\|', '\\\\&\\\\&', ';;', '\\\\|\\\\&', '\\\\<\\\\(', '>>', '>\\\\&', '[&;()|<>]'\n].join('|') + ')';\nvar META = '|&;()<> \\\\t';\nvar BAREWORD = '(\\\\\\\\[\\'\"' + META + ']|[^\\\\s\\'\"' + META + '])+';\nvar SINGLE_QUOTE = '\"((\\\\\\\\\"|[^\"])*?)\"';\nvar DOUBLE_QUOTE = '\\'((\\\\\\\\\\'|[^\\'])*?)\\'';\n\nvar TOKEN = '';\nfor (var i = 0; i < 4; i++) {\n    TOKEN += (Math.pow(16,8)*Math.random()).toString(16);\n}\n\nexports.parse = function (s, env, opts) {\n    var mapped = parse(s, env, opts);\n    if (typeof env !== 'function') return mapped;\n    return mapped.reduce(function (acc, s) {\n        if (typeof s === 'object') return acc.concat(s);\n        var xs = s.split(RegExp('(' + TOKEN + '.*?' + TOKEN + ')', 'g'));\n        if (xs.length === 1) return acc.concat(xs[0]);\n        return acc.concat(xs.filter(Boolean).map(function (x) {\n            if (RegExp('^' + TOKEN).test(x)) {\n                return JSON.parse(x.split(TOKEN)[1]);\n            }\n            else return x;\n        }));\n    }, []);\n};\n\nfunction parse (s, env, opts) {\n    var chunker = new RegExp([\n        '(' + CONTROL + ')', // control chars\n        '(' + BAREWORD + '|' + SINGLE_QUOTE + '|' + DOUBLE_QUOTE + ')*'\n    ].join('|'), 'g');\n    var match = s.match(chunker).filter(Boolean);\n    var commented = false;\n\n    if (!match) return [];\n    if (!env) env = {};\n    if (!opts) opts = {};\n    return match.map(function (s, j) {\n        if (commented) {\n            return;\n        }\n        if (RegExp('^' + CONTROL + '$').test(s)) {\n            return { op: s };\n        }\n\n        // Hand-written scanner/parser for Bash quoting rules:\n        //\n        //  1. inside single quotes, all characters are printed literally.\n        //  2. inside double quotes, all characters are printed literally\n        //     except variables prefixed by '$' and backslashes followed by\n        //     either a double quote or another backslash.\n        //  3. outside of any quotes, backslashes are treated as escape\n        //     characters and not printed (unless they are themselves escaped)\n        //  4. quote context can switch mid-token if there is no whitespace\n        //     between the two quote contexts (e.g. all'one'\"token\" parses as\n        //     \"allonetoken\")\n        var SQ = \"'\";\n        var DQ = '\"';\n        var DS = '$';\n        var BS = opts.escape || '\\\\';\n        var quote = false;\n        var esc = false;\n        var out = '';\n        var isGlob = false;\n\n        for (var i = 0, len = s.length; i < len; i++) {\n            var c = s.charAt(i);\n            isGlob = isGlob || (!quote && (c === '*' || c === '?'));\n            if (esc) {\n                out += c;\n                esc = false;\n            }\n            else if (quote) {\n                if (c === quote) {\n                    quote = false;\n                }\n                else if (quote == SQ) {\n                    out += c;\n                }\n                else { // Double quote\n                    if (c === BS) {\n                        i += 1;\n                        c = s.charAt(i);\n                        if (c === DQ || c === BS || c === DS) {\n                            out += c;\n                        } else {\n                            out += BS + c;\n                        }\n                    }\n                    else if (c === DS) {\n                        out += parseEnvVar();\n                    }\n                    else {\n                        out += c;\n                    }\n                }\n            }\n            else if (c === DQ || c === SQ) {\n                quote = c;\n            }\n            else if (RegExp('^' + CONTROL + '$').test(c)) {\n                return { op: s };\n            }\n            else if (RegExp('^#$').test(c)) {\n                commented = true;\n                if (out.length){\n                    return [out, { comment: s.slice(i+1) + match.slice(j+1).join(' ') }];\n                }\n                return [{ comment: s.slice(i+1) + match.slice(j+1).join(' ') }];\n            }\n            else if (c === BS) {\n                esc = true;\n            }\n            else if (c === DS) {\n                out += parseEnvVar();\n            }\n            else out += c;\n        }\n\n        if (isGlob) return {op: 'glob', pattern: out};\n\n        return out;\n\n        function parseEnvVar() {\n            i += 1;\n            var varend, varname;\n            //debugger\n            if (s.charAt(i) === '{') {\n                i += 1;\n                if (s.charAt(i) === '}') {\n                    throw new Error(\"Bad substitution: \" + s.substr(i - 2, 3));\n                }\n                varend = s.indexOf('}', i);\n                if (varend < 0) {\n                    throw new Error(\"Bad substitution: \" + s.substr(i));\n                }\n                varname = s.substr(i, varend - i);\n                i = varend;\n            }\n            else if (/[*@#?$!_\\-]/.test(s.charAt(i))) {\n                varname = s.charAt(i);\n                i += 1;\n            }\n            else {\n                varend = s.substr(i).match(/[^\\w\\d_]/);\n                if (!varend) {\n                    varname = s.substr(i);\n                    i = s.length;\n                } else {\n                    varname = s.substr(i, varend.index);\n                    i += varend.index - 1;\n                }\n            }\n            return getVar(null, '', varname);\n        }\n    })\n    // finalize parsed aruments\n    .reduce(function(prev, arg){\n        if (arg === undefined){\n            return prev;\n        }\n        return prev.concat(arg);\n    },[]);\n\n    function getVar (_, pre, key) {\n        var r = typeof env === 'function' ? env(key) : env[key];\n        if (r === undefined && key != '')\n            r = '';\n        else if (r === undefined)\n            r = '$';\n\n        if (typeof r === 'object') {\n            return pre + TOKEN + JSON.stringify(r) + TOKEN;\n        }\n        else return pre + r;\n    }\n}\n"],"names":["flagSymbol","Symbol","ArgError","Error","constructor","msg","code","super","this","name","Object","setPrototypeOf","prototype","arg","opts","argv","process","slice","permissive","stopAtPositional","result","_","aliases","handlers","key","keys","length","type","isFlag","Array","isArray","fn","value","prev","push","Boolean","i","len","wholeArg","concat","separatedArguments","split","map","a","j","originalArgName","argStr","undefined","argName","match","Number","BigInt","flag","COUNT","v","existingCount","module","exports","version","description","help","colors","spec","kernel","globalThis","Kernel","play","cid","args","video","document","createElement","autoplay","controls","src","style","width","height","windows","create","title","mount","search","q","fetch","response","json","results","data","hits","filter","hit","mimetype","includes","hash","replace","terminal","log","columnify","columnSplitter","columns","config","minWidth","maxWidth","run","term","context","cliParse","cmd","CONTROL","join","TOKEN","Math","pow","random","toString","s","env","mapped","chunker","RegExp","commented","test","op","BS","escape","quote","esc","out","isGlob","c","charAt","parseEnvVar","comment","pattern","varend","varname","pre","r","substr","indexOf","index","JSON","stringify","reduce","parse","acc","xs","x"],"sourceRoot":""}