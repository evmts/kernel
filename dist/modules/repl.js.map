{"version":3,"file":"modules/repl.js","mappings":";mBACA,IAAIA,EAAsB,sPCA1B,smNCAAA,EAAoBC,EAAI,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXH,EAAoBK,EAAEF,EAAYC,KAASJ,EAAoBK,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3EJ,EAAoBK,EAAI,CAACK,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GFgBrDL,OAAOS,eAAP,YAAsB,mHAAoBC","sources":["file:///webpack/bootstrap","file:////home/j/code/web3os/@web3os-core/kernel/src/modules/repl/index.js","file:///webpack/runtime/define property getters","file:///webpack/runtime/hasOwnProperty shorthand"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","export const name = 'repl'\nexport const version = '0.1.0'\nexport const description = 'Read Eval Print Loop'\nexport const help = `\n  An interactive Javascript command line\n\n  To store and retrieve values, either use the global/window object or the \"env\" object.\n\n  E.g.:\n    > env.testValue = 'test!'\n    > console.log(env)\n\n  Use the command \"$custom\" to see builtin REPL commands\n`\n\nlet originalConsoleLog\nexport const AsyncFunction = Object.getPrototypeOf(async function(){}).constructor\n\nexport async function execute (cmd = () => {}, term = globalThis.Terminal) {\n  try {\n    const func = new AsyncFunction('term', 'env', cmd)\n    const results = await func(term, term.env)\n    if (results) console.dir(results)\n    term.log(results)\n  } catch (err) {\n    console.error(err)\n    term.log(err.message)\n  } finally {\n    term.prompt()\n  }\n}\n\nexport default async function (term, context) {\n  let fitInterval\n\n  const mount = document.createElement('div')\n  mount.style.height = '100%'\n\n  const app = term.kernel.windows.create({\n    title: 'REPL',\n    mount,\n    max: true,\n    x: 'center',\n    y: 'center',\n    onclose: () => {\n      clearInterval(fitInterval)\n      console.log = originalConsoleLog ? originalConsoleLog : console.log\n      originalConsoleLog = null\n    }\n  })\n\n  originalConsoleLog = console.log\n  console.log = function () {\n    replTerm.log(...arguments)\n    originalConsoleLog.apply(console, arguments)\n  }\n\n  app.window.body.style.overflowY = 'hidden'\n\n  const replTerm = term.kernel.Web3osTerminal.create({\n    kernel: term.kernel,\n    fontSize: 22,\n    promptFormat: '> ',\n    customCommands: [\n      {\n        name: '.clear',\n        run: term => { term.clear(); term.prompt() }\n      },\n      {\n        name: '.exit',\n        run: () => app.window.close()\n      }\n    ]\n  })\n\n  replTerm.execute = line => execute(line, replTerm)\n\n  replTerm.open(mount)\n  mount.querySelector('.xterm').style.position = 'unset'\n  fitInterval = setInterval(() => replTerm.fit(), 200)\n\n  replTerm.focus()\n  replTerm.log(`3os REPL v${version}`)\n  replTerm.log(help)\n  replTerm.prompt()\n}\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))"],"names":["__webpack_require__","d","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","getPrototypeOf","constructor"],"sourceRoot":""}