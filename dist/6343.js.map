{"version":3,"file":"6343.js","mappings":"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","sources":["webpack://@web3os-core/kernel/./src/modules/donate/index.js","webpack://@web3os-core/kernel/./node_modules/.pnpm/shell-quote@1.7.3/node_modules/shell-quote/index.js"],"sourcesContent":["/*\r\n  This will evolve as more contributors join the project.\r\n  I want to eventually have some sort of DAO or other\r\n  fair distribution of donations for contributors.\r\n*/\r\n\r\nimport arg from 'arg'\r\nimport Web3 from 'web3'\r\nimport colors from 'ansi-colors'\r\nimport { parse as cliParse } from 'shell-quote'\r\n\r\nexport const name = 'donate'\r\nexport const version = '0.1.0'\r\nexport const description = 'Donate to web3os developers'\r\nexport const help = `\r\n  ${colors.magenta.bold(description)}\r\n\r\n  Usage:\r\n    donate [command] [options]\r\n\r\n  Commands:\r\n    {native}                        Donate the native currency of the current chain\r\n    paypal                          Donate via Paypal\r\n    stripe                          Donate via Stripe\r\n    ada                             Donate Cardano ADA\r\n    btc                             Donate Bitcoin\r\n    ltc                             Donate Litecoin\r\n    doge                            Donate Dogecoin\r\n\r\n  Options:\r\n    --address                       Override the default donation address\r\n    --amount                        Specify the amount to send (defaults to 0.01)\r\n    --help                          Print this help message\r\n    --version                       Print the version information\r\n`\r\n\r\nlet kernel = globalThis.Kernel\r\n\r\nexport const spec = {\r\n  '--address': String,\r\n  '--amount': String,\r\n  '--help': Boolean,\r\n  '--version': Boolean\r\n}\r\n\r\nexport const defaultAddresses = {\r\n  native: '0xF1b60919F4c8a842D68F99BcEEb7eb21D02c9988',\r\n  ada: '',\r\n  btc: '',\r\n  ltc: '',\r\n  doge: '',\r\n  paypal: 'dev@web3os.sh'\r\n}\r\n\r\nfunction sendNative (args) {\r\n  kernel.wallet.web3.eth.sendTransaction({\r\n    from: kernel.modules.account.account.address,\r\n    to: args['--address'] || defaultAddresses.native,\r\n    value: Web3.utils.toWei(args['--amount'] || '0.01')\r\n  })\r\n}\r\n\r\nexport async function run (term, context = '') {\r\n  const args = arg(spec, { argv: cliParse(context) })\r\n  if (args['--version']) return term.log(version)\r\n  if (args['--help']) return term.log(help)\r\n\r\n  kernel = term.kernel\r\n  args.terminal = term\r\n  const cmd = args._?.[0]\r\n\r\n  switch (cmd) {\r\n    case 'ada':\r\n    case 'btc':\r\n    case 'ltc':\r\n    case 'doge':\r\n    case 'paypal':\r\n    case 'stripe':\r\n      return term.log('Not yet implemented')\r\n    case 'native':\r\n    default:\r\n      return sendNative(args)\r\n  }\r\n}\r\n","exports.quote = function (xs) {\n    return xs.map(function (s) {\n        if (s && typeof s === 'object') {\n            return s.op.replace(/(.)/g, '\\\\$1');\n        }\n        else if (/[\"\\s]/.test(s) && !/'/.test(s)) {\n            return \"'\" + s.replace(/(['\\\\])/g, '\\\\$1') + \"'\";\n        }\n        else if (/[\"'\\s]/.test(s)) {\n            return '\"' + s.replace(/([\"\\\\$`!])/g, '\\\\$1') + '\"';\n        }\n        else {\n            return String(s).replace(/([A-Za-z]:)?([#!\"$&'()*,:;<=>?@\\[\\\\\\]^`{|}])/g, '$1\\\\$2');\n        }\n    }).join(' ');\n};\n\n// '<(' is process substitution operator and\n// can be parsed the same as control operator\nvar CONTROL = '(?:' + [\n    '\\\\|\\\\|', '\\\\&\\\\&', ';;', '\\\\|\\\\&', '\\\\<\\\\(', '>>', '>\\\\&', '[&;()|<>]'\n].join('|') + ')';\nvar META = '|&;()<> \\\\t';\nvar BAREWORD = '(\\\\\\\\[\\'\"' + META + ']|[^\\\\s\\'\"' + META + '])+';\nvar SINGLE_QUOTE = '\"((\\\\\\\\\"|[^\"])*?)\"';\nvar DOUBLE_QUOTE = '\\'((\\\\\\\\\\'|[^\\'])*?)\\'';\n\nvar TOKEN = '';\nfor (var i = 0; i < 4; i++) {\n    TOKEN += (Math.pow(16,8)*Math.random()).toString(16);\n}\n\nexports.parse = function (s, env, opts) {\n    var mapped = parse(s, env, opts);\n    if (typeof env !== 'function') return mapped;\n    return mapped.reduce(function (acc, s) {\n        if (typeof s === 'object') return acc.concat(s);\n        var xs = s.split(RegExp('(' + TOKEN + '.*?' + TOKEN + ')', 'g'));\n        if (xs.length === 1) return acc.concat(xs[0]);\n        return acc.concat(xs.filter(Boolean).map(function (x) {\n            if (RegExp('^' + TOKEN).test(x)) {\n                return JSON.parse(x.split(TOKEN)[1]);\n            }\n            else return x;\n        }));\n    }, []);\n};\n\nfunction parse (s, env, opts) {\n    var chunker = new RegExp([\n        '(' + CONTROL + ')', // control chars\n        '(' + BAREWORD + '|' + SINGLE_QUOTE + '|' + DOUBLE_QUOTE + ')*'\n    ].join('|'), 'g');\n    var match = s.match(chunker).filter(Boolean);\n    var commented = false;\n\n    if (!match) return [];\n    if (!env) env = {};\n    if (!opts) opts = {};\n    return match.map(function (s, j) {\n        if (commented) {\n            return;\n        }\n        if (RegExp('^' + CONTROL + '$').test(s)) {\n            return { op: s };\n        }\n\n        // Hand-written scanner/parser for Bash quoting rules:\n        //\n        //  1. inside single quotes, all characters are printed literally.\n        //  2. inside double quotes, all characters are printed literally\n        //     except variables prefixed by '$' and backslashes followed by\n        //     either a double quote or another backslash.\n        //  3. outside of any quotes, backslashes are treated as escape\n        //     characters and not printed (unless they are themselves escaped)\n        //  4. quote context can switch mid-token if there is no whitespace\n        //     between the two quote contexts (e.g. all'one'\"token\" parses as\n        //     \"allonetoken\")\n        var SQ = \"'\";\n        var DQ = '\"';\n        var DS = '$';\n        var BS = opts.escape || '\\\\';\n        var quote = false;\n        var esc = false;\n        var out = '';\n        var isGlob = false;\n\n        for (var i = 0, len = s.length; i < len; i++) {\n            var c = s.charAt(i);\n            isGlob = isGlob || (!quote && (c === '*' || c === '?'));\n            if (esc) {\n                out += c;\n                esc = false;\n            }\n            else if (quote) {\n                if (c === quote) {\n                    quote = false;\n                }\n                else if (quote == SQ) {\n                    out += c;\n                }\n                else { // Double quote\n                    if (c === BS) {\n                        i += 1;\n                        c = s.charAt(i);\n                        if (c === DQ || c === BS || c === DS) {\n                            out += c;\n                        } else {\n                            out += BS + c;\n                        }\n                    }\n                    else if (c === DS) {\n                        out += parseEnvVar();\n                    }\n                    else {\n                        out += c;\n                    }\n                }\n            }\n            else if (c === DQ || c === SQ) {\n                quote = c;\n            }\n            else if (RegExp('^' + CONTROL + '$').test(c)) {\n                return { op: s };\n            }\n            else if (RegExp('^#$').test(c)) {\n                commented = true;\n                if (out.length){\n                    return [out, { comment: s.slice(i+1) + match.slice(j+1).join(' ') }];\n                }\n                return [{ comment: s.slice(i+1) + match.slice(j+1).join(' ') }];\n            }\n            else if (c === BS) {\n                esc = true;\n            }\n            else if (c === DS) {\n                out += parseEnvVar();\n            }\n            else out += c;\n        }\n\n        if (isGlob) return {op: 'glob', pattern: out};\n\n        return out;\n\n        function parseEnvVar() {\n            i += 1;\n            var varend, varname;\n            //debugger\n            if (s.charAt(i) === '{') {\n                i += 1;\n                if (s.charAt(i) === '}') {\n                    throw new Error(\"Bad substitution: \" + s.substr(i - 2, 3));\n                }\n                varend = s.indexOf('}', i);\n                if (varend < 0) {\n                    throw new Error(\"Bad substitution: \" + s.substr(i));\n                }\n                varname = s.substr(i, varend - i);\n                i = varend;\n            }\n            else if (/[*@#?$!_\\-]/.test(s.charAt(i))) {\n                varname = s.charAt(i);\n                i += 1;\n            }\n            else {\n                varend = s.substr(i).match(/[^\\w\\d_]/);\n                if (!varend) {\n                    varname = s.substr(i);\n                    i = s.length;\n                } else {\n                    varname = s.substr(i, varend.index);\n                    i += varend.index - 1;\n                }\n            }\n            return getVar(null, '', varname);\n        }\n    })\n    // finalize parsed aruments\n    .reduce(function(prev, arg){\n        if (arg === undefined){\n            return prev;\n        }\n        return prev.concat(arg);\n    },[]);\n\n    function getVar (_, pre, key) {\n        var r = typeof env === 'function' ? env(key) : env[key];\n        if (r === undefined && key != '')\n            r = '';\n        else if (r === undefined)\n            r = '$';\n\n        if (typeof r === 'object') {\n            return pre + TOKEN + JSON.stringify(r) + TOKEN;\n        }\n        else return pre + r;\n    }\n}\n"],"names":["name","version","description","help","colors","kernel","globalThis","Kernel","spec","String","Boolean","defaultAddresses","native","ada","btc","ltc","doge","paypal","sendNative","args","wallet","web3","eth","sendTransaction","from","modules","account","address","to","value","Web3","run","term","context","arg","argv","cliParse","log","terminal","cmd","_","CONTROL","join","TOKEN","i","Math","pow","random","toString","exports","s","env","opts","mapped","chunker","RegExp","match","filter","commented","map","j","test","op","BS","escape","quote","esc","out","isGlob","len","length","c","charAt","parseEnvVar","comment","slice","pattern","varend","varname","pre","key","r","Error","substr","indexOf","index","undefined","JSON","stringify","reduce","prev","concat","parse","acc","xs","split","x"],"sourceRoot":""}