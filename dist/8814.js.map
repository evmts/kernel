{"version":3,"file":"8814.js","mappings":"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","sources":["webpack://@web3os-core/kernel/./src/modules/wallet/index.js","webpack://@web3os-core/kernel/./src/modules/wallet/locales/de-DE.js","webpack://@web3os-core/kernel/./src/modules/wallet/locales/index.js","webpack://@web3os-core/kernel/./src/assets/icon.png","webpack://@web3os-core/kernel/./src/assets/logo-text.png"],"sourcesContent":["import arg from 'arg'\nimport Onboard from '@web3-onboard/core'\nimport onboardInjected from '@web3-onboard/injected-wallets'\nimport onboardTrezor from '@web3-onboard/trezor'\nimport { parse as cliParse } from 'shell-quote'\n\nimport icon from '../../assets/icon.png'\nimport logo from '../../assets/logo-text.png'\nimport allChains from './chains.json'\nimport locales from './locales'\n\nconst { t } = Kernel.i18n\nKernel.i18n.loadAppLocales(locales)\n\nexport const name = '@web3os-core/wallet'\nexport const version = '0.1.0'\nexport const description = t('app:wallet.description', 'Wallet Utility')\nexport const help = `\n  ${t('Usage')}:\n    wallet <${t('Command')}> <${t('Arguments')}> [${t('Options')}]\n\n  ${t('Commands')}:\n    ls                             ${t('app:wallet.helpCommandLs', 'List loaded wallets')}\n    describe <id>                  ${t('app:wallet.helpCommandDescribe', 'Describe wallet')}\n\n  ${t('Options')}:\n    --help                         ${t('app:wallet.helpOptionHelp', 'Display this help message')}\n    --version                      ${t('app:wallet.helpOptionVersion', 'Display the version')}\n`\n\nexport const spec = {\n  '--help': Boolean,\n  '--version': Boolean,\n\n  '-h': '--help',\n  '-v': '--version'\n}\n\nexport const recommendedInjectedWallets = [{ name: 'MetaMask', url: 'https://metamask.io' }]\nexport const metadata = { name, icon, logo, description, recommendedInjectedWallets }\n\nexport const walletTypes = [\n  onboardInjected(),\n  onboardTrezor({\n    appUrl: Kernel.get('wallet', 'trezor-appUrl') || 'https://web3os.sh',\n    email: Kernel.get('wallet', 'trezor-email') || 'nobody@web3os.dev'\n  })\n]\n\nexport const chains = allChains\nexport const onboardChains = chains\n  .filter(chain => chain.rpc?.length > 0)\n  .map(chain => ({\n    id: '0x' + chain.chainId.toString(16),\n    label: chain.name,\n    rpcUrl: chain.rpc[0].replace('${INFURA_API_KEY}', Kernel.get('infura', 'apiKey')),\n    token: chain.nativeCurrency.symbol\n  }))\n\nexport const onboard = Onboard({\n  wallets: walletTypes,\n  chains: onboardChains,\n  appMetadata: metadata,\n  notify: {\n    desktop: {\n      enabled: true,\n      transactionHandler: transaction => {\n        console.log({ transaction })\n        if (transaction.eventCode === 'txPool') {\n          return {\n            type: 'success',\n            message: t('app:wallet.txInMempool', 'Your transaction from web3os is in the mempool'),\n          }\n        }\n      },\n      position: 'bottomRight'\n    },\n    mobile: {\n      enabled: true,\n      transactionHandler: transaction => {\n        console.log({ transaction })\n        if (transaction.eventCode === 'txPool') {\n          return {\n            type: 'success',\n            message: t('app:wallet.txInMempool', 'Your transaction from web3os is in the mempool'),\n          }\n        }\n      },\n      position: 'topRight'\n    }\n  },\n  accountCenter: {\n    desktop: {\n      position: 'topRight',\n      enabled: true,\n      minimal: true\n    },\n    mobile: {\n      position: 'topRight',\n      enabled: true,\n      minimal: true\n    }\n  }\n})\n\nexport function wallets () {\n  return onboard.state.get().wallets\n}\n\nexport async function connect () {\n  const walletsSubscription = onboard.state.select('wallets')\n  walletsSubscription.subscribe(wallets => {\n    const connectedWallets = wallets.map(({ label }) => label)\n    globalThis.localStorage.setItem('web3os.wallet.wallets', JSON.stringify(connectedWallets))\n  })\n  \n  const previouslyConnectedWallets = JSON.parse(window.localStorage.getItem('connectedWallets'))\n  \n  if (previouslyConnectedWallets) {\n    await onboard.connectWallet({\n      autoSelect: { label: previouslyConnectedWallets[0] }\n    })\n  } else {\n    await onboard.connectWallet()\n  }\n\n  const element = document.querySelector('onboard-v2')\n  element.style.position = 'absolute'\n  element.style.zIndex = 100000\n}\n\nexport async function toggleAccountCenter () {\n  const element = document.querySelector('onboard-v2')\n  element.style.display = element.style.display === 'none' ? 'block' : 'none'\n}\n\nexport async function execute (cmd, args) {\n  switch (cmd) {\n    case 'connect':\n      return await connect()\n    case 'ls':\n      return await args.terminal.log(wallets().map(wallet => wallet.label + ':' + wallet.accounts[0].address))\n    case 'describe':\n      const wallet = wallets().find(wallet => wallet.name === args._?.[1])\n      console.log({ wallet })\n      return await args.terminal.log(wallet)\n    default:\n      return await args.terminal.log(help)\n  }\n}\n\nexport async function run (terminal = globalThis.Terminal, context = '') {\n  const args = arg(spec, { argv: cliParse(context) })\n  if (args['--version']) return terminal.log(version)\n  if (args['--help']) return terminal.log(help)\n\n  args.terminal = terminal\n  args.kernel = terminal.kernel\n\n  return execute(args._?.[0], args)\n}","export default {\n  wallet: {\n    description: 'Wallet-Dienstprogramm',\n  }\n}\n","import deDE from './de-DE'\n\nexport default {\n  de: deDE\n}\n","module.exports = __webpack_public_path__ + \"imgs/icon.405bd010.png\";","module.exports = __webpack_public_path__ + \"imgs/logo-text.09ec3ba3.png\";"],"names":["i","t","Kernel","i18n","loadAppLocales","locales","name","version","description","help","spec","Boolean","recommendedInjectedWallets","url","metadata","icon","logo","walletTypes","onboardInjected","onboardTrezor","appUrl","get","email","chains","allChains","onboardChains","filter","chain","rpc","length","map","id","chainId","toString","label","rpcUrl","replace","token","nativeCurrency","symbol","onboard","Onboard","wallets","appMetadata","notify","desktop","enabled","transactionHandler","transaction","console","log","eventCode","type","message","position","mobile","accountCenter","minimal","state","connect","select","subscribe","connectedWallets","globalThis","localStorage","setItem","JSON","stringify","previouslyConnectedWallets","parse","window","getItem","connectWallet","autoSelect","element","document","querySelector","style","zIndex","toggleAccountCenter","display","execute","cmd","args","terminal","wallet","accounts","address","find","_","run","Terminal","context","arg","argv","cliParse","kernel","de","deDE","module","exports"],"sourceRoot":""}