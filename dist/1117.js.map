{"version":3,"file":"1117.js","mappings":"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","sources":["file:////home/j/code/web3os/@web3os-core/kernel/src/modules/contract/index.js"],"sourcesContent":["import arg from 'arg'\r\nimport Web3 from 'web3'\r\nimport colors from 'ansi-colors'\r\nimport Contract from 'web3-eth-contract'\r\nimport { parse as cliParse } from 'shell-quote'\r\n\r\nexport const name = 'contract'\r\nexport const version = '0.1.0'\r\nexport const description = 'Smart Contract Utility'\r\nexport const help = `\r\n  ${colors.magenta.bold('Smart Contract Utility')}\r\n  See sample scripts:\r\n    https://github.com/web3os-org/sample-scripts/tree/master/contract\r\n\r\n  Usage:\r\n    contract <command> [options]\r\n  \r\n  Examples:\r\n    contract call 0xDEADBEEFCAFE retrieve()\r\n    contract send 0xDEADBEEFCAFE store(12345)\r\n\r\n  Commands:\r\n    read <address> <method> [...args]        Call a method on a smart contract (call)\r\n    write <address> <method> [...args]        Send a tx to a smart contract (send)\r\n\r\n  Options:\r\n    --abi-file                               Path to the contract ABI JSON file\r\n    --abi-url                                Path to the contract ABI JSON url\r\n    --artifact-url                           Path to the contract artifact url\r\n    --help                                   Print this help message\r\n    --version                                Print the version information\r\n`\r\n\r\nexport const spec = {\r\n  '--abi-file': String,\r\n  '--abi-url': String,\r\n  '--artifact-url': String,\r\n  '--help': Boolean,\r\n  '--version': Boolean\r\n}\r\n\r\nconst provider = Web3.givenProvider\r\nconst web3 = new Web3(provider)\r\nContract.setProvider(web3)\r\n\r\nexport async function read (options) {\r\n  return await call(options)\r\n}\r\n\r\nexport async function write (options) {\r\n  return await send(options)\r\n}\r\n\r\nexport async function call (options) {\r\n  return await execute({ ...options, cmd: 'call' })\r\n}\r\n\r\nexport async function send (options) {\r\n  return await execute({ ...options, cmd: 'send' })\r\n}\r\n\r\nasync function execute ({ cmd, address, method, abiFile, abiUrl, args = [] }) {\r\n  const callArgs = { _: [cmd, address, method, { op: '(' }, ...args, { op: ')' }] }\r\n  if (abiFile) callArgs['--abi-file'] = abiFile\r\n  if (abiUrl) callArgs['--abi-url'] = abiUrl\r\n\r\n  try {\r\n    return await go(cmd, address, method, callArgs)\r\n  } catch (err) {\r\n    return err\r\n  }\r\n}\r\n\r\nexport async function go (cmd, address, method, args) {\r\n  // console.log(cmd, { address, method, args, web3 }, args._?.[3])\r\n\r\n  if (!kernel.wallet.account?.address) throw new Error('You must have a connected account')\r\n\r\n  if (args._?.[3]?.op === '(') {\r\n    let done = false\r\n    let methodParams = args._.filter((param, index) => {\r\n      if (done || index < 4) return false\r\n      if (typeof param === 'object' && param.op === ')') return !(done = true)\r\n      return true\r\n    }).join('').split(',').filter(p => p !== '')\r\n\r\n    let abi, metadata\r\n    if (!args['--abi-url'] && !args['--abi-file'] && ![args['--artifact-url']]) {\r\n      throw new Error('You must specify --abi-file, --abi-url, or --artifact-url')\r\n    }\r\n\r\n    if (args['--abi-url']) {\r\n      const response = await fetch(args['--abi-url'])\r\n      abi = await response.json()\r\n    } else if (args['--abi-file']) {\r\n      metadata = { source: 'fs' }\r\n      abi = JSON.parse(kernel.fs.readFileSync(args['--abi-file']).toString())\r\n    } else if (args['--artifact-url']) {\r\n      const response = await fetch(args['--artifact-url'])\r\n      metadata = await response.json()\r\n      abi = metadata.output?.abi\r\n    }\r\n\r\n    if (!abi || typeof abi !== 'object') throw new Error('Unable to load the ABI')\r\n\r\n    const contract = new Contract(abi, address, { from: kernel.wallet.account?.address })\r\n    return await contract.methods?.[method](...methodParams)[cmd]()\r\n  }\r\n}\r\n\r\nexport async function run (term, context = '') {\r\n  const args = arg(spec, { argv: cliParse(context) })\r\n  if (args['--version']) return term.log(version)\r\n  if (args['--help']) return term.log(help)\r\n\r\n  if (args['--network'] && !['mainnet', 'goerli', 'kovan', 'rinkeby', 'ropsten'].includes(args['--network'])) throw new Error('Invalid network')\r\n\r\n  const cmd = args._?.[0]\r\n\r\n  switch (cmd) {\r\n    case 'call':\r\n    case 'read':\r\n      return term.log(await go('call', args._?.[1], args._?.[2], args))\r\n    case 'send':\r\n    case 'write':\r\n      return term.log(await go('send', args._?.[1], args._?.[2], args))\r\n    default:\r\n      return term.log(help)\r\n  }\r\n}\r\n"],"names":["i","name","version","description","help","colors","spec","String","Boolean","provider","Web3","web3","read","options","call","write","send","execute","cmd","address","method","abiFile","abiUrl","args","callArgs","_","op","go","kernel","wallet","account","Error","done","methodParams","filter","param","index","join","split","p","fetch","response","json","abi","metadata","source","JSON","parse","fs","readFileSync","toString","output","contract","Contract","from","methods","run","term","context","arg","argv","cliParse","log","includes"],"sourceRoot":""}